# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type asset_type {
  id: ID!
  name: String
  diagnostic_type(
    where: diagnostic_typeWhereInput! = {}
    orderBy: [diagnostic_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [diagnostic_type!]
  diagnostic_typeCount(where: diagnostic_typeWhereInput! = {}): Int
  inspection_type(
    where: inspection_typeWhereInput! = {}
    orderBy: [inspection_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [inspection_type!]
  inspection_typeCount(where: inspection_typeWhereInput! = {}): Int
  autopsy_type(
    where: autopsy_typeWhereInput! = {}
    orderBy: [autopsy_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [autopsy_type!]
  autopsy_typeCount(where: autopsy_typeWhereInput! = {}): Int
}

input asset_typeWhereUniqueInput {
  id: ID
  name: String
}

input asset_typeWhereInput {
  AND: [asset_typeWhereInput!]
  OR: [asset_typeWhereInput!]
  NOT: [asset_typeWhereInput!]
  id: IDFilter
  name: StringFilter
  diagnostic_type: diagnostic_typeManyRelationFilter
  inspection_type: inspection_typeManyRelationFilter
  autopsy_type: autopsy_typeManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input diagnostic_typeManyRelationFilter {
  every: diagnostic_typeWhereInput
  some: diagnostic_typeWhereInput
  none: diagnostic_typeWhereInput
}

input inspection_typeManyRelationFilter {
  every: inspection_typeWhereInput
  some: inspection_typeWhereInput
  none: inspection_typeWhereInput
}

input autopsy_typeManyRelationFilter {
  every: autopsy_typeWhereInput
  some: autopsy_typeWhereInput
  none: autopsy_typeWhereInput
}

input asset_typeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input asset_typeUpdateInput {
  name: String
  diagnostic_type: diagnostic_typeRelateToManyForUpdateInput
  inspection_type: inspection_typeRelateToManyForUpdateInput
  autopsy_type: autopsy_typeRelateToManyForUpdateInput
}

input diagnostic_typeRelateToManyForUpdateInput {
  disconnect: [diagnostic_typeWhereUniqueInput!]
  set: [diagnostic_typeWhereUniqueInput!]
  create: [diagnostic_typeCreateInput!]
  connect: [diagnostic_typeWhereUniqueInput!]
}

input inspection_typeRelateToManyForUpdateInput {
  disconnect: [inspection_typeWhereUniqueInput!]
  set: [inspection_typeWhereUniqueInput!]
  create: [inspection_typeCreateInput!]
  connect: [inspection_typeWhereUniqueInput!]
}

input autopsy_typeRelateToManyForUpdateInput {
  disconnect: [autopsy_typeWhereUniqueInput!]
  set: [autopsy_typeWhereUniqueInput!]
  create: [autopsy_typeCreateInput!]
  connect: [autopsy_typeWhereUniqueInput!]
}

input asset_typeUpdateArgs {
  where: asset_typeWhereUniqueInput!
  data: asset_typeUpdateInput!
}

input asset_typeCreateInput {
  name: String
  diagnostic_type: diagnostic_typeRelateToManyForCreateInput
  inspection_type: inspection_typeRelateToManyForCreateInput
  autopsy_type: autopsy_typeRelateToManyForCreateInput
}

input diagnostic_typeRelateToManyForCreateInput {
  create: [diagnostic_typeCreateInput!]
  connect: [diagnostic_typeWhereUniqueInput!]
}

input inspection_typeRelateToManyForCreateInput {
  create: [inspection_typeCreateInput!]
  connect: [inspection_typeWhereUniqueInput!]
}

input autopsy_typeRelateToManyForCreateInput {
  create: [autopsy_typeCreateInput!]
  connect: [autopsy_typeWhereUniqueInput!]
}

type autopsy {
  id: ID!
  date: DateTime
  self_diagnostic_file: FileFieldOutput
  pressure_log: FileFieldOutput
  comments: String
  user: user
  hdw_issue: hdw_issue
  autopsy_type: autopsy_type
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

interface FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input autopsyWhereUniqueInput {
  id: ID
}

input autopsyWhereInput {
  AND: [autopsyWhereInput!]
  OR: [autopsyWhereInput!]
  NOT: [autopsyWhereInput!]
  id: IDFilter
  date: DateTimeFilter
  comments: StringFilter
  user: userWhereInput
  hdw_issue: hdw_issueWhereInput
  autopsy_type: autopsy_typeWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input autopsyOrderByInput {
  id: OrderDirection
  date: OrderDirection
  comments: OrderDirection
}

input autopsyUpdateInput {
  date: DateTime
  self_diagnostic_file: FileFieldInput
  pressure_log: FileFieldInput
  comments: String
  user: userRelateToOneForUpdateInput
  hdw_issue: hdw_issueRelateToOneForUpdateInput
  autopsy_type: autopsy_typeRelateToOneForUpdateInput
}

input FileFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input userRelateToOneForUpdateInput {
  create: userCreateInput
  connect: userWhereUniqueInput
  disconnect: Boolean
}

input hdw_issueRelateToOneForUpdateInput {
  create: hdw_issueCreateInput
  connect: hdw_issueWhereUniqueInput
  disconnect: Boolean
}

input autopsy_typeRelateToOneForUpdateInput {
  create: autopsy_typeCreateInput
  connect: autopsy_typeWhereUniqueInput
  disconnect: Boolean
}

input autopsyUpdateArgs {
  where: autopsyWhereUniqueInput!
  data: autopsyUpdateInput!
}

input autopsyCreateInput {
  date: DateTime
  self_diagnostic_file: FileFieldInput
  pressure_log: FileFieldInput
  comments: String
  user: userRelateToOneForCreateInput
  hdw_issue: hdw_issueRelateToOneForCreateInput
  autopsy_type: autopsy_typeRelateToOneForCreateInput
}

input userRelateToOneForCreateInput {
  create: userCreateInput
  connect: userWhereUniqueInput
}

input hdw_issueRelateToOneForCreateInput {
  create: hdw_issueCreateInput
  connect: hdw_issueWhereUniqueInput
}

input autopsy_typeRelateToOneForCreateInput {
  create: autopsy_typeCreateInput
  connect: autopsy_typeWhereUniqueInput
}

type autopsy_type {
  id: ID!
  name: String
  asset_type: asset_type
  component: component_type
  root: autopsy_root
}

input autopsy_typeWhereUniqueInput {
  id: ID
  name: String
}

input autopsy_typeWhereInput {
  AND: [autopsy_typeWhereInput!]
  OR: [autopsy_typeWhereInput!]
  NOT: [autopsy_typeWhereInput!]
  id: IDFilter
  name: StringFilter
  asset_type: asset_typeWhereInput
  component: component_typeWhereInput
  root: autopsy_rootWhereInput
}

input autopsy_typeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input autopsy_typeUpdateInput {
  name: String
  asset_type: asset_typeRelateToOneForUpdateInput
  component: component_typeRelateToOneForUpdateInput
  root: autopsy_rootRelateToOneForUpdateInput
}

input asset_typeRelateToOneForUpdateInput {
  create: asset_typeCreateInput
  connect: asset_typeWhereUniqueInput
  disconnect: Boolean
}

input component_typeRelateToOneForUpdateInput {
  create: component_typeCreateInput
  connect: component_typeWhereUniqueInput
  disconnect: Boolean
}

input autopsy_rootRelateToOneForUpdateInput {
  create: autopsy_rootCreateInput
  connect: autopsy_rootWhereUniqueInput
  disconnect: Boolean
}

input autopsy_typeUpdateArgs {
  where: autopsy_typeWhereUniqueInput!
  data: autopsy_typeUpdateInput!
}

input autopsy_typeCreateInput {
  name: String
  asset_type: asset_typeRelateToOneForCreateInput
  component: component_typeRelateToOneForCreateInput
  root: autopsy_rootRelateToOneForCreateInput
}

input asset_typeRelateToOneForCreateInput {
  create: asset_typeCreateInput
  connect: asset_typeWhereUniqueInput
}

input component_typeRelateToOneForCreateInput {
  create: component_typeCreateInput
  connect: component_typeWhereUniqueInput
}

input autopsy_rootRelateToOneForCreateInput {
  create: autopsy_rootCreateInput
  connect: autopsy_rootWhereUniqueInput
}

type autopsy_root {
  id: ID!
  name: String
}

input autopsy_rootWhereUniqueInput {
  id: ID
  name: String
}

input autopsy_rootWhereInput {
  AND: [autopsy_rootWhereInput!]
  OR: [autopsy_rootWhereInput!]
  NOT: [autopsy_rootWhereInput!]
  id: IDFilter
  name: StringFilter
}

input autopsy_rootOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input autopsy_rootUpdateInput {
  name: String
}

input autopsy_rootUpdateArgs {
  where: autopsy_rootWhereUniqueInput!
  data: autopsy_rootUpdateInput!
}

input autopsy_rootCreateInput {
  name: String
}

type battery_type {
  id: ID!
  name: String
}

input battery_typeWhereUniqueInput {
  id: ID
  name: String
}

input battery_typeWhereInput {
  AND: [battery_typeWhereInput!]
  OR: [battery_typeWhereInput!]
  NOT: [battery_typeWhereInput!]
  id: IDFilter
  name: StringFilter
}

input battery_typeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input battery_typeUpdateInput {
  name: String
}

input battery_typeUpdateArgs {
  where: battery_typeWhereUniqueInput!
  data: battery_typeUpdateInput!
}

input battery_typeCreateInput {
  name: String
}

type city {
  id: ID!
  name: String
  province: province
  field(
    where: fieldWhereInput! = {}
    orderBy: [fieldOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [field!]
  fieldCount(where: fieldWhereInput! = {}): Int
}

input cityWhereUniqueInput {
  id: ID
}

input cityWhereInput {
  AND: [cityWhereInput!]
  OR: [cityWhereInput!]
  NOT: [cityWhereInput!]
  id: IDFilter
  name: StringFilter
  province: provinceWhereInput
  field: fieldManyRelationFilter
}

input fieldManyRelationFilter {
  every: fieldWhereInput
  some: fieldWhereInput
  none: fieldWhereInput
}

input cityOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input cityUpdateInput {
  name: String
  province: provinceRelateToOneForUpdateInput
  field: fieldRelateToManyForUpdateInput
}

input provinceRelateToOneForUpdateInput {
  create: provinceCreateInput
  connect: provinceWhereUniqueInput
  disconnect: Boolean
}

input fieldRelateToManyForUpdateInput {
  disconnect: [fieldWhereUniqueInput!]
  set: [fieldWhereUniqueInput!]
  create: [fieldCreateInput!]
  connect: [fieldWhereUniqueInput!]
}

input cityUpdateArgs {
  where: cityWhereUniqueInput!
  data: cityUpdateInput!
}

input cityCreateInput {
  name: String
  province: provinceRelateToOneForCreateInput
  field: fieldRelateToManyForCreateInput
}

input provinceRelateToOneForCreateInput {
  create: provinceCreateInput
  connect: provinceWhereUniqueInput
}

input fieldRelateToManyForCreateInput {
  create: [fieldCreateInput!]
  connect: [fieldWhereUniqueInput!]
}

type client {
  id: ID!
  name: String
  field(
    where: fieldWhereInput! = {}
    orderBy: [fieldOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [field!]
  fieldCount(where: fieldWhereInput! = {}): Int
}

input clientWhereUniqueInput {
  id: ID
}

input clientWhereInput {
  AND: [clientWhereInput!]
  OR: [clientWhereInput!]
  NOT: [clientWhereInput!]
  id: IDFilter
  name: StringFilter
  field: fieldManyRelationFilter
}

input clientOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input clientUpdateInput {
  name: String
  field: fieldRelateToManyForUpdateInput
}

input clientUpdateArgs {
  where: clientWhereUniqueInput!
  data: clientUpdateInput!
}

input clientCreateInput {
  name: String
  field: fieldRelateToManyForCreateInput
}

type component_type {
  id: ID!
  name: String
}

input component_typeWhereUniqueInput {
  id: ID
  name: String
}

input component_typeWhereInput {
  AND: [component_typeWhereInput!]
  OR: [component_typeWhereInput!]
  NOT: [component_typeWhereInput!]
  id: IDFilter
  name: StringFilter
}

input component_typeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input component_typeUpdateInput {
  name: String
}

input component_typeUpdateArgs {
  where: component_typeWhereUniqueInput!
  data: component_typeUpdateInput!
}

input component_typeCreateInput {
  name: String
}

type diagnostic_type {
  id: ID!
  name: String
  type: asset_type
  gateway_satellite_power: Boolean
  angles: Boolean
  packet_202_count: Boolean
  battery_2to3: Boolean
  positions: Boolean
  lost_packets: Boolean
  node_to_gateway_distance_in_meters: Boolean
  gateway_first_data_transmission_date: Boolean
  height_difference_in_meters: Boolean
  from_hour: Boolean
  to_hour: Boolean
  packet_203_count: Boolean
  pressure_difference: Boolean
}

input diagnostic_typeWhereUniqueInput {
  id: ID
  name: String
}

input diagnostic_typeWhereInput {
  AND: [diagnostic_typeWhereInput!]
  OR: [diagnostic_typeWhereInput!]
  NOT: [diagnostic_typeWhereInput!]
  id: IDFilter
  name: StringFilter
  type: asset_typeWhereInput
  gateway_satellite_power: BooleanFilter
  angles: BooleanFilter
  packet_202_count: BooleanFilter
  battery_2to3: BooleanFilter
  positions: BooleanFilter
  lost_packets: BooleanFilter
  node_to_gateway_distance_in_meters: BooleanFilter
  gateway_first_data_transmission_date: BooleanFilter
  height_difference_in_meters: BooleanFilter
  from_hour: BooleanFilter
  to_hour: BooleanFilter
  packet_203_count: BooleanFilter
  pressure_difference: BooleanFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input diagnostic_typeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  gateway_satellite_power: OrderDirection
  angles: OrderDirection
  packet_202_count: OrderDirection
  battery_2to3: OrderDirection
  positions: OrderDirection
  lost_packets: OrderDirection
  node_to_gateway_distance_in_meters: OrderDirection
  gateway_first_data_transmission_date: OrderDirection
  height_difference_in_meters: OrderDirection
  from_hour: OrderDirection
  to_hour: OrderDirection
  packet_203_count: OrderDirection
  pressure_difference: OrderDirection
}

input diagnostic_typeUpdateInput {
  name: String
  type: asset_typeRelateToOneForUpdateInput
  gateway_satellite_power: Boolean
  angles: Boolean
  packet_202_count: Boolean
  battery_2to3: Boolean
  positions: Boolean
  lost_packets: Boolean
  node_to_gateway_distance_in_meters: Boolean
  gateway_first_data_transmission_date: Boolean
  height_difference_in_meters: Boolean
  from_hour: Boolean
  to_hour: Boolean
  packet_203_count: Boolean
  pressure_difference: Boolean
}

input diagnostic_typeUpdateArgs {
  where: diagnostic_typeWhereUniqueInput!
  data: diagnostic_typeUpdateInput!
}

input diagnostic_typeCreateInput {
  name: String
  type: asset_typeRelateToOneForCreateInput
  gateway_satellite_power: Boolean
  angles: Boolean
  packet_202_count: Boolean
  battery_2to3: Boolean
  positions: Boolean
  lost_packets: Boolean
  node_to_gateway_distance_in_meters: Boolean
  gateway_first_data_transmission_date: Boolean
  height_difference_in_meters: Boolean
  from_hour: Boolean
  to_hour: Boolean
  packet_203_count: Boolean
  pressure_difference: Boolean
}

type diagnostic {
  id: ID!
  date: DateTime
  comments: String
  gateway_satellite_power: Float
  angles: String
  packet_202_count: Int
  battery_2to3: Boolean
  positions: String
  lost_packets: Int
  node_to_gateway_distance_in_meters: Float
  gateway_first_data_transmission_date: DateTime
  height_difference_in_meters: Float
  from_hour: String
  to_hour: String
  packet_203_count: Int
  pressure_difference: Float
  grafana_link: String
  altimetry_image: ImageFieldOutput
  user: user
  hdw_issue: hdw_issue
  diagnostic_type: diagnostic_type
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input diagnosticWhereUniqueInput {
  id: ID
}

input diagnosticWhereInput {
  AND: [diagnosticWhereInput!]
  OR: [diagnosticWhereInput!]
  NOT: [diagnosticWhereInput!]
  id: IDFilter
  date: DateTimeFilter
  comments: StringFilter
  gateway_satellite_power: FloatNullableFilter
  angles: StringFilter
  packet_202_count: IntNullableFilter
  battery_2to3: BooleanFilter
  positions: StringNullableFilter
  lost_packets: IntNullableFilter
  node_to_gateway_distance_in_meters: FloatNullableFilter
  gateway_first_data_transmission_date: DateTimeNullableFilter
  height_difference_in_meters: FloatNullableFilter
  from_hour: StringFilter
  to_hour: StringFilter
  packet_203_count: IntNullableFilter
  pressure_difference: FloatNullableFilter
  grafana_link: StringFilter
  user: userWhereInput
  hdw_issue: hdw_issueWhereInput
  diagnostic_type: diagnostic_typeWhereInput
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input diagnosticOrderByInput {
  id: OrderDirection
  date: OrderDirection
  comments: OrderDirection
  gateway_satellite_power: OrderDirection
  angles: OrderDirection
  packet_202_count: OrderDirection
  battery_2to3: OrderDirection
  positions: OrderDirection
  lost_packets: OrderDirection
  node_to_gateway_distance_in_meters: OrderDirection
  gateway_first_data_transmission_date: OrderDirection
  height_difference_in_meters: OrderDirection
  from_hour: OrderDirection
  to_hour: OrderDirection
  packet_203_count: OrderDirection
  pressure_difference: OrderDirection
  grafana_link: OrderDirection
}

input diagnosticUpdateInput {
  date: DateTime
  comments: String
  gateway_satellite_power: Float
  angles: String
  packet_202_count: Int
  battery_2to3: Boolean
  positions: String
  lost_packets: Int
  node_to_gateway_distance_in_meters: Float
  gateway_first_data_transmission_date: DateTime
  height_difference_in_meters: Float
  from_hour: String
  to_hour: String
  packet_203_count: Int
  pressure_difference: Float
  grafana_link: String
  altimetry_image: ImageFieldInput
  user: userRelateToOneForUpdateInput
  hdw_issue: hdw_issueRelateToOneForUpdateInput
  diagnostic_type: diagnostic_typeRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

input diagnostic_typeRelateToOneForUpdateInput {
  create: diagnostic_typeCreateInput
  connect: diagnostic_typeWhereUniqueInput
  disconnect: Boolean
}

input diagnosticUpdateArgs {
  where: diagnosticWhereUniqueInput!
  data: diagnosticUpdateInput!
}

input diagnosticCreateInput {
  date: DateTime
  comments: String
  gateway_satellite_power: Float
  angles: String
  packet_202_count: Int
  battery_2to3: Boolean
  positions: String
  lost_packets: Int
  node_to_gateway_distance_in_meters: Float
  gateway_first_data_transmission_date: DateTime
  height_difference_in_meters: Float
  from_hour: String
  to_hour: String
  packet_203_count: Int
  pressure_difference: Float
  grafana_link: String
  altimetry_image: ImageFieldInput
  user: userRelateToOneForCreateInput
  hdw_issue: hdw_issueRelateToOneForCreateInput
  diagnostic_type: diagnostic_typeRelateToOneForCreateInput
}

input diagnostic_typeRelateToOneForCreateInput {
  create: diagnostic_typeCreateInput
  connect: diagnostic_typeWhereUniqueInput
}

type field {
  id: ID!
  name: String
  gate: String
  phone: String
  irrigator(
    where: irrigatorWhereInput! = {}
    orderBy: [irrigatorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [irrigator!]
  irrigatorCount(where: irrigatorWhereInput! = {}): Int
  zone: zone
  city: city
  client: client
}

input fieldWhereUniqueInput {
  id: ID
}

input fieldWhereInput {
  AND: [fieldWhereInput!]
  OR: [fieldWhereInput!]
  NOT: [fieldWhereInput!]
  id: IDFilter
  name: StringFilter
  gate: StringFilter
  phone: StringFilter
  irrigator: irrigatorManyRelationFilter
  zone: zoneWhereInput
  city: cityWhereInput
  client: clientWhereInput
}

input irrigatorManyRelationFilter {
  every: irrigatorWhereInput
  some: irrigatorWhereInput
  none: irrigatorWhereInput
}

input fieldOrderByInput {
  id: OrderDirection
  name: OrderDirection
  gate: OrderDirection
  phone: OrderDirection
}

input fieldUpdateInput {
  name: String
  gate: String
  phone: String
  irrigator: irrigatorRelateToManyForUpdateInput
  zone: zoneRelateToOneForUpdateInput
  city: cityRelateToOneForUpdateInput
  client: clientRelateToOneForUpdateInput
}

input irrigatorRelateToManyForUpdateInput {
  disconnect: [irrigatorWhereUniqueInput!]
  set: [irrigatorWhereUniqueInput!]
  create: [irrigatorCreateInput!]
  connect: [irrigatorWhereUniqueInput!]
}

input zoneRelateToOneForUpdateInput {
  create: zoneCreateInput
  connect: zoneWhereUniqueInput
  disconnect: Boolean
}

input cityRelateToOneForUpdateInput {
  create: cityCreateInput
  connect: cityWhereUniqueInput
  disconnect: Boolean
}

input clientRelateToOneForUpdateInput {
  create: clientCreateInput
  connect: clientWhereUniqueInput
  disconnect: Boolean
}

input fieldUpdateArgs {
  where: fieldWhereUniqueInput!
  data: fieldUpdateInput!
}

input fieldCreateInput {
  name: String
  gate: String
  phone: String
  irrigator: irrigatorRelateToManyForCreateInput
  zone: zoneRelateToOneForCreateInput
  city: cityRelateToOneForCreateInput
  client: clientRelateToOneForCreateInput
}

input irrigatorRelateToManyForCreateInput {
  create: [irrigatorCreateInput!]
  connect: [irrigatorWhereUniqueInput!]
}

input zoneRelateToOneForCreateInput {
  create: zoneCreateInput
  connect: zoneWhereUniqueInput
}

input cityRelateToOneForCreateInput {
  create: cityCreateInput
  connect: cityWhereUniqueInput
}

input clientRelateToOneForCreateInput {
  create: clientCreateInput
  connect: clientWhereUniqueInput
}

type gateway {
  id: ID!
  fabrication_date: DateTime
  integration_id: String
  irrigator: irrigator
  housing_type: gateway_housing_type
  satellite_modem: satellite_modem
  satellite_antenna: satellite_antenna
  pcb_gateway: pcb_gateway
  hdw_issue: hdw_issue
  install_uninstall_request: install_uninstall_request
  lora_antenna_type: lora_antenna_type
  storage_location: storage_location
  installed_in_repair(
    where: repairWhereInput! = {}
    orderBy: [repairOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [repair!]
  installed_in_repairCount(where: repairWhereInput! = {}): Int
  stock_movement(
    where: stock_movementWhereInput! = {}
    orderBy: [stock_movementOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [stock_movement!]
  stock_movementCount(where: stock_movementWhereInput! = {}): Int
}

input gatewayWhereUniqueInput {
  id: ID
  integration_id: String
}

input gatewayWhereInput {
  AND: [gatewayWhereInput!]
  OR: [gatewayWhereInput!]
  NOT: [gatewayWhereInput!]
  id: IDFilter
  fabrication_date: DateTimeFilter
  integration_id: StringFilter
  irrigator: irrigatorWhereInput
  housing_type: gateway_housing_typeWhereInput
  satellite_modem: satellite_modemWhereInput
  satellite_antenna: satellite_antennaWhereInput
  pcb_gateway: pcb_gatewayWhereInput
  hdw_issue: hdw_issueWhereInput
  install_uninstall_request: install_uninstall_requestWhereInput
  lora_antenna_type: lora_antenna_typeWhereInput
  storage_location: storage_locationWhereInput
  installed_in_repair: repairManyRelationFilter
  stock_movement: stock_movementManyRelationFilter
}

input repairManyRelationFilter {
  every: repairWhereInput
  some: repairWhereInput
  none: repairWhereInput
}

input stock_movementManyRelationFilter {
  every: stock_movementWhereInput
  some: stock_movementWhereInput
  none: stock_movementWhereInput
}

input gatewayOrderByInput {
  id: OrderDirection
  fabrication_date: OrderDirection
  integration_id: OrderDirection
}

input gatewayUpdateInput {
  fabrication_date: DateTime
  integration_id: String
  irrigator: irrigatorRelateToOneForUpdateInput
  housing_type: gateway_housing_typeRelateToOneForUpdateInput
  satellite_modem: satellite_modemRelateToOneForUpdateInput
  satellite_antenna: satellite_antennaRelateToOneForUpdateInput
  pcb_gateway: pcb_gatewayRelateToOneForUpdateInput
  hdw_issue: hdw_issueRelateToOneForUpdateInput
  install_uninstall_request: install_uninstall_requestRelateToOneForUpdateInput
  lora_antenna_type: lora_antenna_typeRelateToOneForUpdateInput
  storage_location: storage_locationRelateToOneForUpdateInput
  installed_in_repair: repairRelateToManyForUpdateInput
  stock_movement: stock_movementRelateToManyForUpdateInput
}

input irrigatorRelateToOneForUpdateInput {
  create: irrigatorCreateInput
  connect: irrigatorWhereUniqueInput
  disconnect: Boolean
}

input gateway_housing_typeRelateToOneForUpdateInput {
  create: gateway_housing_typeCreateInput
  connect: gateway_housing_typeWhereUniqueInput
  disconnect: Boolean
}

input satellite_modemRelateToOneForUpdateInput {
  create: satellite_modemCreateInput
  connect: satellite_modemWhereUniqueInput
  disconnect: Boolean
}

input satellite_antennaRelateToOneForUpdateInput {
  create: satellite_antennaCreateInput
  connect: satellite_antennaWhereUniqueInput
  disconnect: Boolean
}

input pcb_gatewayRelateToOneForUpdateInput {
  create: pcb_gatewayCreateInput
  connect: pcb_gatewayWhereUniqueInput
  disconnect: Boolean
}

input install_uninstall_requestRelateToOneForUpdateInput {
  create: install_uninstall_requestCreateInput
  connect: install_uninstall_requestWhereUniqueInput
  disconnect: Boolean
}

input lora_antenna_typeRelateToOneForUpdateInput {
  create: lora_antenna_typeCreateInput
  connect: lora_antenna_typeWhereUniqueInput
  disconnect: Boolean
}

input storage_locationRelateToOneForUpdateInput {
  create: storage_locationCreateInput
  connect: storage_locationWhereUniqueInput
  disconnect: Boolean
}

input repairRelateToManyForUpdateInput {
  disconnect: [repairWhereUniqueInput!]
  set: [repairWhereUniqueInput!]
  create: [repairCreateInput!]
  connect: [repairWhereUniqueInput!]
}

input stock_movementRelateToManyForUpdateInput {
  disconnect: [stock_movementWhereUniqueInput!]
  set: [stock_movementWhereUniqueInput!]
  create: [stock_movementCreateInput!]
  connect: [stock_movementWhereUniqueInput!]
}

input gatewayUpdateArgs {
  where: gatewayWhereUniqueInput!
  data: gatewayUpdateInput!
}

input gatewayCreateInput {
  fabrication_date: DateTime
  integration_id: String
  irrigator: irrigatorRelateToOneForCreateInput
  housing_type: gateway_housing_typeRelateToOneForCreateInput
  satellite_modem: satellite_modemRelateToOneForCreateInput
  satellite_antenna: satellite_antennaRelateToOneForCreateInput
  pcb_gateway: pcb_gatewayRelateToOneForCreateInput
  hdw_issue: hdw_issueRelateToOneForCreateInput
  install_uninstall_request: install_uninstall_requestRelateToOneForCreateInput
  lora_antenna_type: lora_antenna_typeRelateToOneForCreateInput
  storage_location: storage_locationRelateToOneForCreateInput
  installed_in_repair: repairRelateToManyForCreateInput
  stock_movement: stock_movementRelateToManyForCreateInput
}

input irrigatorRelateToOneForCreateInput {
  create: irrigatorCreateInput
  connect: irrigatorWhereUniqueInput
}

input gateway_housing_typeRelateToOneForCreateInput {
  create: gateway_housing_typeCreateInput
  connect: gateway_housing_typeWhereUniqueInput
}

input satellite_modemRelateToOneForCreateInput {
  create: satellite_modemCreateInput
  connect: satellite_modemWhereUniqueInput
}

input satellite_antennaRelateToOneForCreateInput {
  create: satellite_antennaCreateInput
  connect: satellite_antennaWhereUniqueInput
}

input pcb_gatewayRelateToOneForCreateInput {
  create: pcb_gatewayCreateInput
  connect: pcb_gatewayWhereUniqueInput
}

input install_uninstall_requestRelateToOneForCreateInput {
  create: install_uninstall_requestCreateInput
  connect: install_uninstall_requestWhereUniqueInput
}

input lora_antenna_typeRelateToOneForCreateInput {
  create: lora_antenna_typeCreateInput
  connect: lora_antenna_typeWhereUniqueInput
}

input storage_locationRelateToOneForCreateInput {
  create: storage_locationCreateInput
  connect: storage_locationWhereUniqueInput
}

input repairRelateToManyForCreateInput {
  create: [repairCreateInput!]
  connect: [repairWhereUniqueInput!]
}

input stock_movementRelateToManyForCreateInput {
  create: [stock_movementCreateInput!]
  connect: [stock_movementWhereUniqueInput!]
}

type gateway_firmware_version {
  id: ID!
  version: String
  pcb_gateway(
    where: pcb_gatewayWhereInput! = {}
    orderBy: [pcb_gatewayOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [pcb_gateway!]
  pcb_gatewayCount(where: pcb_gatewayWhereInput! = {}): Int
}

input gateway_firmware_versionWhereUniqueInput {
  id: ID
  version: String
}

input gateway_firmware_versionWhereInput {
  AND: [gateway_firmware_versionWhereInput!]
  OR: [gateway_firmware_versionWhereInput!]
  NOT: [gateway_firmware_versionWhereInput!]
  id: IDFilter
  version: StringFilter
  pcb_gateway: pcb_gatewayManyRelationFilter
}

input pcb_gatewayManyRelationFilter {
  every: pcb_gatewayWhereInput
  some: pcb_gatewayWhereInput
  none: pcb_gatewayWhereInput
}

input gateway_firmware_versionOrderByInput {
  id: OrderDirection
  version: OrderDirection
}

input gateway_firmware_versionUpdateInput {
  version: String
  pcb_gateway: pcb_gatewayRelateToManyForUpdateInput
}

input pcb_gatewayRelateToManyForUpdateInput {
  disconnect: [pcb_gatewayWhereUniqueInput!]
  set: [pcb_gatewayWhereUniqueInput!]
  create: [pcb_gatewayCreateInput!]
  connect: [pcb_gatewayWhereUniqueInput!]
}

input gateway_firmware_versionUpdateArgs {
  where: gateway_firmware_versionWhereUniqueInput!
  data: gateway_firmware_versionUpdateInput!
}

input gateway_firmware_versionCreateInput {
  version: String
  pcb_gateway: pcb_gatewayRelateToManyForCreateInput
}

input pcb_gatewayRelateToManyForCreateInput {
  create: [pcb_gatewayCreateInput!]
  connect: [pcb_gatewayWhereUniqueInput!]
}

type gateway_hardware_version {
  id: ID!
  version: String
  pcb_gateway(
    where: pcb_gatewayWhereInput! = {}
    orderBy: [pcb_gatewayOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [pcb_gateway!]
  pcb_gatewayCount(where: pcb_gatewayWhereInput! = {}): Int
}

input gateway_hardware_versionWhereUniqueInput {
  id: ID
  version: String
}

input gateway_hardware_versionWhereInput {
  AND: [gateway_hardware_versionWhereInput!]
  OR: [gateway_hardware_versionWhereInput!]
  NOT: [gateway_hardware_versionWhereInput!]
  id: IDFilter
  version: StringFilter
  pcb_gateway: pcb_gatewayManyRelationFilter
}

input gateway_hardware_versionOrderByInput {
  id: OrderDirection
  version: OrderDirection
}

input gateway_hardware_versionUpdateInput {
  version: String
  pcb_gateway: pcb_gatewayRelateToManyForUpdateInput
}

input gateway_hardware_versionUpdateArgs {
  where: gateway_hardware_versionWhereUniqueInput!
  data: gateway_hardware_versionUpdateInput!
}

input gateway_hardware_versionCreateInput {
  version: String
  pcb_gateway: pcb_gatewayRelateToManyForCreateInput
}

type gateway_housing_type {
  id: ID!
  name: String
}

input gateway_housing_typeWhereUniqueInput {
  id: ID
  name: String
}

input gateway_housing_typeWhereInput {
  AND: [gateway_housing_typeWhereInput!]
  OR: [gateway_housing_typeWhereInput!]
  NOT: [gateway_housing_typeWhereInput!]
  id: IDFilter
  name: StringFilter
}

input gateway_housing_typeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input gateway_housing_typeUpdateInput {
  name: String
}

input gateway_housing_typeUpdateArgs {
  where: gateway_housing_typeWhereUniqueInput!
  data: gateway_housing_typeUpdateInput!
}

input gateway_housing_typeCreateInput {
  name: String
}

type gps_antenna_type {
  id: ID!
  name: String
}

input gps_antenna_typeWhereUniqueInput {
  id: ID
  name: String
}

input gps_antenna_typeWhereInput {
  AND: [gps_antenna_typeWhereInput!]
  OR: [gps_antenna_typeWhereInput!]
  NOT: [gps_antenna_typeWhereInput!]
  id: IDFilter
  name: StringFilter
}

input gps_antenna_typeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input gps_antenna_typeUpdateInput {
  name: String
}

input gps_antenna_typeUpdateArgs {
  where: gps_antenna_typeWhereUniqueInput!
  data: gps_antenna_typeUpdateInput!
}

input gps_antenna_typeCreateInput {
  name: String
}

type gps_node {
  id: ID!
  fabrication_date: DateTime
  integration_id: String
  internal_photo: ImageFieldOutput
  external_photo: ImageFieldOutput
  irrigator: irrigator
  battery_type: battery_type
  gps_antenna_type: gps_antenna_type
  node_housing_type: node_housing_type
  lora_antenna_type: lora_antenna_type
  solar_panel_type: solar_panel_type
  pcb_node: pcb_node
  storage_location: storage_location
  hdw_issue: hdw_issue
  install_uninstall_request: install_uninstall_request
  installed_in_repair(
    where: repairWhereInput! = {}
    orderBy: [repairOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [repair!]
  installed_in_repairCount(where: repairWhereInput! = {}): Int
  stock_movement(
    where: stock_movementWhereInput! = {}
    orderBy: [stock_movementOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [stock_movement!]
  stock_movementCount(where: stock_movementWhereInput! = {}): Int
}

input gps_nodeWhereUniqueInput {
  id: ID
  integration_id: String
}

input gps_nodeWhereInput {
  AND: [gps_nodeWhereInput!]
  OR: [gps_nodeWhereInput!]
  NOT: [gps_nodeWhereInput!]
  id: IDFilter
  fabrication_date: DateTimeFilter
  integration_id: StringFilter
  irrigator: irrigatorWhereInput
  battery_type: battery_typeWhereInput
  gps_antenna_type: gps_antenna_typeWhereInput
  node_housing_type: node_housing_typeWhereInput
  lora_antenna_type: lora_antenna_typeWhereInput
  solar_panel_type: solar_panel_typeWhereInput
  pcb_node: pcb_nodeWhereInput
  storage_location: storage_locationWhereInput
  hdw_issue: hdw_issueWhereInput
  install_uninstall_request: install_uninstall_requestWhereInput
  installed_in_repair: repairManyRelationFilter
  stock_movement: stock_movementManyRelationFilter
}

input gps_nodeOrderByInput {
  id: OrderDirection
  fabrication_date: OrderDirection
  integration_id: OrderDirection
}

input gps_nodeUpdateInput {
  fabrication_date: DateTime
  integration_id: String
  internal_photo: ImageFieldInput
  external_photo: ImageFieldInput
  irrigator: irrigatorRelateToOneForUpdateInput
  battery_type: battery_typeRelateToOneForUpdateInput
  gps_antenna_type: gps_antenna_typeRelateToOneForUpdateInput
  node_housing_type: node_housing_typeRelateToOneForUpdateInput
  lora_antenna_type: lora_antenna_typeRelateToOneForUpdateInput
  solar_panel_type: solar_panel_typeRelateToOneForUpdateInput
  pcb_node: pcb_nodeRelateToOneForUpdateInput
  storage_location: storage_locationRelateToOneForUpdateInput
  hdw_issue: hdw_issueRelateToOneForUpdateInput
  install_uninstall_request: install_uninstall_requestRelateToOneForUpdateInput
  installed_in_repair: repairRelateToManyForUpdateInput
  stock_movement: stock_movementRelateToManyForUpdateInput
}

input battery_typeRelateToOneForUpdateInput {
  create: battery_typeCreateInput
  connect: battery_typeWhereUniqueInput
  disconnect: Boolean
}

input gps_antenna_typeRelateToOneForUpdateInput {
  create: gps_antenna_typeCreateInput
  connect: gps_antenna_typeWhereUniqueInput
  disconnect: Boolean
}

input node_housing_typeRelateToOneForUpdateInput {
  create: node_housing_typeCreateInput
  connect: node_housing_typeWhereUniqueInput
  disconnect: Boolean
}

input solar_panel_typeRelateToOneForUpdateInput {
  create: solar_panel_typeCreateInput
  connect: solar_panel_typeWhereUniqueInput
  disconnect: Boolean
}

input pcb_nodeRelateToOneForUpdateInput {
  create: pcb_nodeCreateInput
  connect: pcb_nodeWhereUniqueInput
  disconnect: Boolean
}

input gps_nodeUpdateArgs {
  where: gps_nodeWhereUniqueInput!
  data: gps_nodeUpdateInput!
}

input gps_nodeCreateInput {
  fabrication_date: DateTime
  integration_id: String
  internal_photo: ImageFieldInput
  external_photo: ImageFieldInput
  irrigator: irrigatorRelateToOneForCreateInput
  battery_type: battery_typeRelateToOneForCreateInput
  gps_antenna_type: gps_antenna_typeRelateToOneForCreateInput
  node_housing_type: node_housing_typeRelateToOneForCreateInput
  lora_antenna_type: lora_antenna_typeRelateToOneForCreateInput
  solar_panel_type: solar_panel_typeRelateToOneForCreateInput
  pcb_node: pcb_nodeRelateToOneForCreateInput
  storage_location: storage_locationRelateToOneForCreateInput
  hdw_issue: hdw_issueRelateToOneForCreateInput
  install_uninstall_request: install_uninstall_requestRelateToOneForCreateInput
  installed_in_repair: repairRelateToManyForCreateInput
  stock_movement: stock_movementRelateToManyForCreateInput
}

input battery_typeRelateToOneForCreateInput {
  create: battery_typeCreateInput
  connect: battery_typeWhereUniqueInput
}

input gps_antenna_typeRelateToOneForCreateInput {
  create: gps_antenna_typeCreateInput
  connect: gps_antenna_typeWhereUniqueInput
}

input node_housing_typeRelateToOneForCreateInput {
  create: node_housing_typeCreateInput
  connect: node_housing_typeWhereUniqueInput
}

input solar_panel_typeRelateToOneForCreateInput {
  create: solar_panel_typeCreateInput
  connect: solar_panel_typeWhereUniqueInput
}

input pcb_nodeRelateToOneForCreateInput {
  create: pcb_nodeCreateInput
  connect: pcb_nodeWhereUniqueInput
}

type hdw_issue {
  id: ID!
  creation_date: DateTime
  close_date: DateTime
  automatic_diagnostic: Int
  comments: String
  time_to_repair_hours: String
  time_to_diagnostic_hours: String
  time_from_removal_to_autopsy_hours: String
  diagnostic: diagnostic
  inspection(
    where: inspectionWhereInput! = {}
    orderBy: [inspectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [inspection!]
  inspectionCount(where: inspectionWhereInput! = {}): Int
  repair(
    where: repairWhereInput! = {}
    orderBy: [repairOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [repair!]
  repairCount(where: repairWhereInput! = {}): Int
  autopsy(
    where: autopsyWhereInput! = {}
    orderBy: [autopsyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [autopsy!]
  autopsyCount(where: autopsyWhereInput! = {}): Int
  status: String
  assigned_technician: user
  irrigator: irrigator
  gateway: gateway
  gps_node: gps_node
  pressure_sensor: pressure_sensor
}

input hdw_issueWhereUniqueInput {
  id: ID
}

input hdw_issueWhereInput {
  AND: [hdw_issueWhereInput!]
  OR: [hdw_issueWhereInput!]
  NOT: [hdw_issueWhereInput!]
  id: IDFilter
  creation_date: DateTimeFilter
  close_date: DateTimeNullableFilter
  automatic_diagnostic: IntNullableFilter
  diagnostic: diagnosticWhereInput
  inspection: inspectionManyRelationFilter
  repair: repairManyRelationFilter
  autopsy: autopsyManyRelationFilter
  status: StringFilter
  assigned_technician: userWhereInput
  irrigator: irrigatorWhereInput
  gateway: gatewayWhereInput
  gps_node: gps_nodeWhereInput
  pressure_sensor: pressure_sensorWhereInput
}

input inspectionManyRelationFilter {
  every: inspectionWhereInput
  some: inspectionWhereInput
  none: inspectionWhereInput
}

input autopsyManyRelationFilter {
  every: autopsyWhereInput
  some: autopsyWhereInput
  none: autopsyWhereInput
}

input hdw_issueOrderByInput {
  id: OrderDirection
  creation_date: OrderDirection
  close_date: OrderDirection
  automatic_diagnostic: OrderDirection
  status: OrderDirection
}

input hdw_issueUpdateInput {
  creation_date: DateTime
  close_date: DateTime
  automatic_diagnostic: Int
  diagnostic: diagnosticRelateToOneForUpdateInput
  inspection: inspectionRelateToManyForUpdateInput
  repair: repairRelateToManyForUpdateInput
  autopsy: autopsyRelateToManyForUpdateInput
  status: String
  assigned_technician: userRelateToOneForUpdateInput
  irrigator: irrigatorRelateToOneForUpdateInput
  gateway: gatewayRelateToOneForUpdateInput
  gps_node: gps_nodeRelateToOneForUpdateInput
  pressure_sensor: pressure_sensorRelateToOneForUpdateInput
}

input diagnosticRelateToOneForUpdateInput {
  create: diagnosticCreateInput
  connect: diagnosticWhereUniqueInput
  disconnect: Boolean
}

input inspectionRelateToManyForUpdateInput {
  disconnect: [inspectionWhereUniqueInput!]
  set: [inspectionWhereUniqueInput!]
  create: [inspectionCreateInput!]
  connect: [inspectionWhereUniqueInput!]
}

input autopsyRelateToManyForUpdateInput {
  disconnect: [autopsyWhereUniqueInput!]
  set: [autopsyWhereUniqueInput!]
  create: [autopsyCreateInput!]
  connect: [autopsyWhereUniqueInput!]
}

input gatewayRelateToOneForUpdateInput {
  create: gatewayCreateInput
  connect: gatewayWhereUniqueInput
  disconnect: Boolean
}

input gps_nodeRelateToOneForUpdateInput {
  create: gps_nodeCreateInput
  connect: gps_nodeWhereUniqueInput
  disconnect: Boolean
}

input pressure_sensorRelateToOneForUpdateInput {
  create: pressure_sensorCreateInput
  connect: pressure_sensorWhereUniqueInput
  disconnect: Boolean
}

input hdw_issueUpdateArgs {
  where: hdw_issueWhereUniqueInput!
  data: hdw_issueUpdateInput!
}

input hdw_issueCreateInput {
  creation_date: DateTime
  close_date: DateTime
  automatic_diagnostic: Int
  diagnostic: diagnosticRelateToOneForCreateInput
  inspection: inspectionRelateToManyForCreateInput
  repair: repairRelateToManyForCreateInput
  autopsy: autopsyRelateToManyForCreateInput
  status: String
  assigned_technician: userRelateToOneForCreateInput
  irrigator: irrigatorRelateToOneForCreateInput
  gateway: gatewayRelateToOneForCreateInput
  gps_node: gps_nodeRelateToOneForCreateInput
  pressure_sensor: pressure_sensorRelateToOneForCreateInput
}

input diagnosticRelateToOneForCreateInput {
  create: diagnosticCreateInput
  connect: diagnosticWhereUniqueInput
}

input inspectionRelateToManyForCreateInput {
  create: [inspectionCreateInput!]
  connect: [inspectionWhereUniqueInput!]
}

input autopsyRelateToManyForCreateInput {
  create: [autopsyCreateInput!]
  connect: [autopsyWhereUniqueInput!]
}

input gatewayRelateToOneForCreateInput {
  create: gatewayCreateInput
  connect: gatewayWhereUniqueInput
}

input gps_nodeRelateToOneForCreateInput {
  create: gps_nodeCreateInput
  connect: gps_nodeWhereUniqueInput
}

input pressure_sensorRelateToOneForCreateInput {
  create: pressure_sensorCreateInput
  connect: pressure_sensorWhereUniqueInput
}

type inspection {
  id: ID!
  date: DateTime
  comments: String
  satellite_power: Float
  gateway_battery_voltage: Float
  lora_power: Float
  gps_node_battery_voltage: Float
  pressure_sensor_signal: Float
  picture: ImageFieldOutput
  log: FileFieldOutput
  user: user
  hdw_issue: hdw_issue
  inspection_type: inspection_type
}

input inspectionWhereUniqueInput {
  id: ID
}

input inspectionWhereInput {
  AND: [inspectionWhereInput!]
  OR: [inspectionWhereInput!]
  NOT: [inspectionWhereInput!]
  id: IDFilter
  date: DateTimeFilter
  comments: StringFilter
  satellite_power: FloatNullableFilter
  gateway_battery_voltage: FloatNullableFilter
  lora_power: FloatNullableFilter
  gps_node_battery_voltage: FloatNullableFilter
  pressure_sensor_signal: FloatNullableFilter
  user: userWhereInput
  hdw_issue: hdw_issueWhereInput
  inspection_type: inspection_typeWhereInput
}

input inspectionOrderByInput {
  id: OrderDirection
  date: OrderDirection
  comments: OrderDirection
  satellite_power: OrderDirection
  gateway_battery_voltage: OrderDirection
  lora_power: OrderDirection
  gps_node_battery_voltage: OrderDirection
  pressure_sensor_signal: OrderDirection
}

input inspectionUpdateInput {
  date: DateTime
  comments: String
  satellite_power: Float
  gateway_battery_voltage: Float
  lora_power: Float
  gps_node_battery_voltage: Float
  pressure_sensor_signal: Float
  picture: ImageFieldInput
  log: FileFieldInput
  user: userRelateToOneForUpdateInput
  hdw_issue: hdw_issueRelateToOneForUpdateInput
  inspection_type: inspection_typeRelateToOneForUpdateInput
}

input inspection_typeRelateToOneForUpdateInput {
  create: inspection_typeCreateInput
  connect: inspection_typeWhereUniqueInput
  disconnect: Boolean
}

input inspectionUpdateArgs {
  where: inspectionWhereUniqueInput!
  data: inspectionUpdateInput!
}

input inspectionCreateInput {
  date: DateTime
  comments: String
  satellite_power: Float
  gateway_battery_voltage: Float
  lora_power: Float
  gps_node_battery_voltage: Float
  pressure_sensor_signal: Float
  picture: ImageFieldInput
  log: FileFieldInput
  user: userRelateToOneForCreateInput
  hdw_issue: hdw_issueRelateToOneForCreateInput
  inspection_type: inspection_typeRelateToOneForCreateInput
}

input inspection_typeRelateToOneForCreateInput {
  create: inspection_typeCreateInput
  connect: inspection_typeWhereUniqueInput
}

type inspection_type {
  id: ID!
  name: String
  type: asset_type
  pot_sat: Boolean
  gateway_battery_voltage: Boolean
  gps_node_battery_voltage: Boolean
  lora_power: Boolean
  pressure_sensor_signal: Boolean
}

input inspection_typeWhereUniqueInput {
  id: ID
  name: String
}

input inspection_typeWhereInput {
  AND: [inspection_typeWhereInput!]
  OR: [inspection_typeWhereInput!]
  NOT: [inspection_typeWhereInput!]
  id: IDFilter
  name: StringFilter
  type: asset_typeWhereInput
  pot_sat: BooleanFilter
  gateway_battery_voltage: BooleanFilter
  gps_node_battery_voltage: BooleanFilter
  lora_power: BooleanFilter
  pressure_sensor_signal: BooleanFilter
}

input inspection_typeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  pot_sat: OrderDirection
  gateway_battery_voltage: OrderDirection
  gps_node_battery_voltage: OrderDirection
  lora_power: OrderDirection
  pressure_sensor_signal: OrderDirection
}

input inspection_typeUpdateInput {
  name: String
  type: asset_typeRelateToOneForUpdateInput
  pot_sat: Boolean
  gateway_battery_voltage: Boolean
  gps_node_battery_voltage: Boolean
  lora_power: Boolean
  pressure_sensor_signal: Boolean
}

input inspection_typeUpdateArgs {
  where: inspection_typeWhereUniqueInput!
  data: inspection_typeUpdateInput!
}

input inspection_typeCreateInput {
  name: String
  type: asset_typeRelateToOneForCreateInput
  pot_sat: Boolean
  gateway_battery_voltage: Boolean
  gps_node_battery_voltage: Boolean
  lora_power: Boolean
  pressure_sensor_signal: Boolean
}

type install_uninstall_request {
  id: ID!
  creation_date: DateTime
  completion_date: DateTime
  close_date: DateTime
  irrigator: irrigator
  gateway: gateway
  gps_node: gps_node
  pressure_sensor: pressure_sensor
  request_type: String
  status: String
  work_order: work_order
  gtw_image: ImageFieldOutput
  node_gps_image: ImageFieldOutput
  pressure_sensor_image: ImageFieldOutput
  log: FileFieldOutput
  assigned_technician: user
}

input install_uninstall_requestWhereUniqueInput {
  id: ID
}

input install_uninstall_requestWhereInput {
  AND: [install_uninstall_requestWhereInput!]
  OR: [install_uninstall_requestWhereInput!]
  NOT: [install_uninstall_requestWhereInput!]
  id: IDFilter
  creation_date: DateTimeFilter
  completion_date: DateTimeNullableFilter
  close_date: DateTimeNullableFilter
  irrigator: irrigatorWhereInput
  gateway: gatewayWhereInput
  gps_node: gps_nodeWhereInput
  pressure_sensor: pressure_sensorWhereInput
  request_type: StringFilter
  status: StringFilter
  work_order: work_orderWhereInput
  assigned_technician: userWhereInput
}

input install_uninstall_requestOrderByInput {
  id: OrderDirection
  creation_date: OrderDirection
  completion_date: OrderDirection
  close_date: OrderDirection
  request_type: OrderDirection
  status: OrderDirection
}

input install_uninstall_requestUpdateInput {
  creation_date: DateTime
  completion_date: DateTime
  close_date: DateTime
  irrigator: irrigatorRelateToOneForUpdateInput
  gateway: gatewayRelateToOneForUpdateInput
  gps_node: gps_nodeRelateToOneForUpdateInput
  pressure_sensor: pressure_sensorRelateToOneForUpdateInput
  request_type: String
  status: String
  work_order: work_orderRelateToOneForUpdateInput
  gtw_image: ImageFieldInput
  node_gps_image: ImageFieldInput
  pressure_sensor_image: ImageFieldInput
  log: FileFieldInput
  assigned_technician: userRelateToOneForUpdateInput
}

input work_orderRelateToOneForUpdateInput {
  create: work_orderCreateInput
  connect: work_orderWhereUniqueInput
  disconnect: Boolean
}

input install_uninstall_requestUpdateArgs {
  where: install_uninstall_requestWhereUniqueInput!
  data: install_uninstall_requestUpdateInput!
}

input install_uninstall_requestCreateInput {
  creation_date: DateTime
  completion_date: DateTime
  close_date: DateTime
  irrigator: irrigatorRelateToOneForCreateInput
  gateway: gatewayRelateToOneForCreateInput
  gps_node: gps_nodeRelateToOneForCreateInput
  pressure_sensor: pressure_sensorRelateToOneForCreateInput
  request_type: String
  status: String
  work_order: work_orderRelateToOneForCreateInput
  gtw_image: ImageFieldInput
  node_gps_image: ImageFieldInput
  pressure_sensor_image: ImageFieldInput
  log: FileFieldInput
  assigned_technician: userRelateToOneForCreateInput
}

input work_orderRelateToOneForCreateInput {
  create: work_orderCreateInput
  connect: work_orderWhereUniqueInput
}

type irrigator {
  id: ID!
  integration_id: String
  name: String
  lat: Float
  long: Float
  status: String
  enabled: Boolean
  mapped: Boolean
  comment: String
  gateway: gateway
  gps_node: gps_node
  field: field
  install_uninstall_request(
    where: install_uninstall_requestWhereInput! = {}
    orderBy: [install_uninstall_requestOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [install_uninstall_request!]
  install_uninstall_requestCount(
    where: install_uninstall_requestWhereInput! = {}
  ): Int
  hdw_issue(
    where: hdw_issueWhereInput! = {}
    orderBy: [hdw_issueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [hdw_issue!]
  hdw_issueCount(where: hdw_issueWhereInput! = {}): Int
  pressure_sensor: pressure_sensor
  contract: contract
  transmission_status: String
}

input irrigatorWhereUniqueInput {
  id: ID
  integration_id: String
}

input irrigatorWhereInput {
  AND: [irrigatorWhereInput!]
  OR: [irrigatorWhereInput!]
  NOT: [irrigatorWhereInput!]
  id: IDFilter
  integration_id: StringFilter
  name: StringFilter
  lat: FloatFilter
  long: FloatFilter
  status: StringFilter
  enabled: BooleanFilter
  mapped: BooleanFilter
  comment: StringFilter
  gateway: gatewayWhereInput
  gps_node: gps_nodeWhereInput
  field: fieldWhereInput
  install_uninstall_request: install_uninstall_requestManyRelationFilter
  hdw_issue: hdw_issueManyRelationFilter
  pressure_sensor: pressure_sensorWhereInput
  contract: contractWhereInput
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input install_uninstall_requestManyRelationFilter {
  every: install_uninstall_requestWhereInput
  some: install_uninstall_requestWhereInput
  none: install_uninstall_requestWhereInput
}

input hdw_issueManyRelationFilter {
  every: hdw_issueWhereInput
  some: hdw_issueWhereInput
  none: hdw_issueWhereInput
}

input irrigatorOrderByInput {
  id: OrderDirection
  integration_id: OrderDirection
  name: OrderDirection
  lat: OrderDirection
  long: OrderDirection
  status: OrderDirection
  enabled: OrderDirection
  mapped: OrderDirection
  comment: OrderDirection
}

input irrigatorUpdateInput {
  integration_id: String
  name: String
  lat: Float
  long: Float
  status: String
  enabled: Boolean
  mapped: Boolean
  comment: String
  gateway: gatewayRelateToOneForUpdateInput
  gps_node: gps_nodeRelateToOneForUpdateInput
  field: fieldRelateToOneForUpdateInput
  install_uninstall_request: install_uninstall_requestRelateToManyForUpdateInput
  hdw_issue: hdw_issueRelateToManyForUpdateInput
  pressure_sensor: pressure_sensorRelateToOneForUpdateInput
  contract: contractRelateToOneForUpdateInput
}

input fieldRelateToOneForUpdateInput {
  create: fieldCreateInput
  connect: fieldWhereUniqueInput
  disconnect: Boolean
}

input install_uninstall_requestRelateToManyForUpdateInput {
  disconnect: [install_uninstall_requestWhereUniqueInput!]
  set: [install_uninstall_requestWhereUniqueInput!]
  create: [install_uninstall_requestCreateInput!]
  connect: [install_uninstall_requestWhereUniqueInput!]
}

input hdw_issueRelateToManyForUpdateInput {
  disconnect: [hdw_issueWhereUniqueInput!]
  set: [hdw_issueWhereUniqueInput!]
  create: [hdw_issueCreateInput!]
  connect: [hdw_issueWhereUniqueInput!]
}

input contractRelateToOneForUpdateInput {
  create: contractCreateInput
  connect: contractWhereUniqueInput
  disconnect: Boolean
}

input irrigatorUpdateArgs {
  where: irrigatorWhereUniqueInput!
  data: irrigatorUpdateInput!
}

input irrigatorCreateInput {
  integration_id: String
  name: String
  lat: Float
  long: Float
  status: String
  enabled: Boolean
  mapped: Boolean
  comment: String
  gateway: gatewayRelateToOneForCreateInput
  gps_node: gps_nodeRelateToOneForCreateInput
  field: fieldRelateToOneForCreateInput
  install_uninstall_request: install_uninstall_requestRelateToManyForCreateInput
  hdw_issue: hdw_issueRelateToManyForCreateInput
  pressure_sensor: pressure_sensorRelateToOneForCreateInput
  contract: contractRelateToOneForCreateInput
}

input fieldRelateToOneForCreateInput {
  create: fieldCreateInput
  connect: fieldWhereUniqueInput
}

input install_uninstall_requestRelateToManyForCreateInput {
  create: [install_uninstall_requestCreateInput!]
  connect: [install_uninstall_requestWhereUniqueInput!]
}

input hdw_issueRelateToManyForCreateInput {
  create: [hdw_issueCreateInput!]
  connect: [hdw_issueWhereUniqueInput!]
}

input contractRelateToOneForCreateInput {
  create: contractCreateInput
  connect: contractWhereUniqueInput
}

type lora_antenna_type {
  id: ID!
  name: String
}

input lora_antenna_typeWhereUniqueInput {
  id: ID
  name: String
}

input lora_antenna_typeWhereInput {
  AND: [lora_antenna_typeWhereInput!]
  OR: [lora_antenna_typeWhereInput!]
  NOT: [lora_antenna_typeWhereInput!]
  id: IDFilter
  name: StringFilter
}

input lora_antenna_typeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input lora_antenna_typeUpdateInput {
  name: String
}

input lora_antenna_typeUpdateArgs {
  where: lora_antenna_typeWhereUniqueInput!
  data: lora_antenna_typeUpdateInput!
}

input lora_antenna_typeCreateInput {
  name: String
}

type node_firmware_version {
  id: ID!
  version: String
  pcb_node(
    where: pcb_nodeWhereInput! = {}
    orderBy: [pcb_nodeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [pcb_node!]
  pcb_nodeCount(where: pcb_nodeWhereInput! = {}): Int
}

input node_firmware_versionWhereUniqueInput {
  id: ID
  version: String
}

input node_firmware_versionWhereInput {
  AND: [node_firmware_versionWhereInput!]
  OR: [node_firmware_versionWhereInput!]
  NOT: [node_firmware_versionWhereInput!]
  id: IDFilter
  version: StringFilter
  pcb_node: pcb_nodeManyRelationFilter
}

input pcb_nodeManyRelationFilter {
  every: pcb_nodeWhereInput
  some: pcb_nodeWhereInput
  none: pcb_nodeWhereInput
}

input node_firmware_versionOrderByInput {
  id: OrderDirection
  version: OrderDirection
}

input node_firmware_versionUpdateInput {
  version: String
  pcb_node: pcb_nodeRelateToManyForUpdateInput
}

input pcb_nodeRelateToManyForUpdateInput {
  disconnect: [pcb_nodeWhereUniqueInput!]
  set: [pcb_nodeWhereUniqueInput!]
  create: [pcb_nodeCreateInput!]
  connect: [pcb_nodeWhereUniqueInput!]
}

input node_firmware_versionUpdateArgs {
  where: node_firmware_versionWhereUniqueInput!
  data: node_firmware_versionUpdateInput!
}

input node_firmware_versionCreateInput {
  version: String
  pcb_node: pcb_nodeRelateToManyForCreateInput
}

input pcb_nodeRelateToManyForCreateInput {
  create: [pcb_nodeCreateInput!]
  connect: [pcb_nodeWhereUniqueInput!]
}

type node_hardware_version {
  id: ID!
  version: String
  pcb_node(
    where: pcb_nodeWhereInput! = {}
    orderBy: [pcb_nodeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [pcb_node!]
  pcb_nodeCount(where: pcb_nodeWhereInput! = {}): Int
}

input node_hardware_versionWhereUniqueInput {
  id: ID
  version: String
}

input node_hardware_versionWhereInput {
  AND: [node_hardware_versionWhereInput!]
  OR: [node_hardware_versionWhereInput!]
  NOT: [node_hardware_versionWhereInput!]
  id: IDFilter
  version: StringFilter
  pcb_node: pcb_nodeManyRelationFilter
}

input node_hardware_versionOrderByInput {
  id: OrderDirection
  version: OrderDirection
}

input node_hardware_versionUpdateInput {
  version: String
  pcb_node: pcb_nodeRelateToManyForUpdateInput
}

input node_hardware_versionUpdateArgs {
  where: node_hardware_versionWhereUniqueInput!
  data: node_hardware_versionUpdateInput!
}

input node_hardware_versionCreateInput {
  version: String
  pcb_node: pcb_nodeRelateToManyForCreateInput
}

type node_housing_type {
  id: ID!
  name: String
}

input node_housing_typeWhereUniqueInput {
  id: ID
  name: String
}

input node_housing_typeWhereInput {
  AND: [node_housing_typeWhereInput!]
  OR: [node_housing_typeWhereInput!]
  NOT: [node_housing_typeWhereInput!]
  id: IDFilter
  name: StringFilter
}

input node_housing_typeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input node_housing_typeUpdateInput {
  name: String
}

input node_housing_typeUpdateArgs {
  where: node_housing_typeWhereUniqueInput!
  data: node_housing_typeUpdateInput!
}

input node_housing_typeCreateInput {
  name: String
}

type pcb_gateway {
  id: ID!
  integration_id: String
  fabrication_date: DateTime
  picture: ImageFieldOutput
  status: String
  gateway: gateway
  firmware_version: gateway_firmware_version
  hardware_version: gateway_hardware_version
}

input pcb_gatewayWhereUniqueInput {
  id: ID
  integration_id: String
}

input pcb_gatewayWhereInput {
  AND: [pcb_gatewayWhereInput!]
  OR: [pcb_gatewayWhereInput!]
  NOT: [pcb_gatewayWhereInput!]
  id: IDFilter
  integration_id: StringFilter
  fabrication_date: DateTimeFilter
  status: StringFilter
  gateway: gatewayWhereInput
  firmware_version: gateway_firmware_versionWhereInput
  hardware_version: gateway_hardware_versionWhereInput
}

input pcb_gatewayOrderByInput {
  id: OrderDirection
  integration_id: OrderDirection
  fabrication_date: OrderDirection
  status: OrderDirection
}

input pcb_gatewayUpdateInput {
  integration_id: String
  fabrication_date: DateTime
  picture: ImageFieldInput
  status: String
  gateway: gatewayRelateToOneForUpdateInput
  firmware_version: gateway_firmware_versionRelateToOneForUpdateInput
  hardware_version: gateway_hardware_versionRelateToOneForUpdateInput
}

input gateway_firmware_versionRelateToOneForUpdateInput {
  create: gateway_firmware_versionCreateInput
  connect: gateway_firmware_versionWhereUniqueInput
  disconnect: Boolean
}

input gateway_hardware_versionRelateToOneForUpdateInput {
  create: gateway_hardware_versionCreateInput
  connect: gateway_hardware_versionWhereUniqueInput
  disconnect: Boolean
}

input pcb_gatewayUpdateArgs {
  where: pcb_gatewayWhereUniqueInput!
  data: pcb_gatewayUpdateInput!
}

input pcb_gatewayCreateInput {
  integration_id: String
  fabrication_date: DateTime
  picture: ImageFieldInput
  status: String
  gateway: gatewayRelateToOneForCreateInput
  firmware_version: gateway_firmware_versionRelateToOneForCreateInput
  hardware_version: gateway_hardware_versionRelateToOneForCreateInput
}

input gateway_firmware_versionRelateToOneForCreateInput {
  create: gateway_firmware_versionCreateInput
  connect: gateway_firmware_versionWhereUniqueInput
}

input gateway_hardware_versionRelateToOneForCreateInput {
  create: gateway_hardware_versionCreateInput
  connect: gateway_hardware_versionWhereUniqueInput
}

type pcb_node {
  id: ID!
  integration_id: String
  fabrication_date: DateTime
  picture: ImageFieldOutput
  status: String
  gps_node: gps_node
  firmware_version: node_firmware_version
  hardware_version: node_hardware_version
}

input pcb_nodeWhereUniqueInput {
  id: ID
  integration_id: String
}

input pcb_nodeWhereInput {
  AND: [pcb_nodeWhereInput!]
  OR: [pcb_nodeWhereInput!]
  NOT: [pcb_nodeWhereInput!]
  id: IDFilter
  integration_id: StringFilter
  fabrication_date: DateTimeFilter
  status: StringFilter
  gps_node: gps_nodeWhereInput
  firmware_version: node_firmware_versionWhereInput
  hardware_version: node_hardware_versionWhereInput
}

input pcb_nodeOrderByInput {
  id: OrderDirection
  integration_id: OrderDirection
  fabrication_date: OrderDirection
  status: OrderDirection
}

input pcb_nodeUpdateInput {
  integration_id: String
  fabrication_date: DateTime
  picture: ImageFieldInput
  status: String
  gps_node: gps_nodeRelateToOneForUpdateInput
  firmware_version: node_firmware_versionRelateToOneForUpdateInput
  hardware_version: node_hardware_versionRelateToOneForUpdateInput
}

input node_firmware_versionRelateToOneForUpdateInput {
  create: node_firmware_versionCreateInput
  connect: node_firmware_versionWhereUniqueInput
  disconnect: Boolean
}

input node_hardware_versionRelateToOneForUpdateInput {
  create: node_hardware_versionCreateInput
  connect: node_hardware_versionWhereUniqueInput
  disconnect: Boolean
}

input pcb_nodeUpdateArgs {
  where: pcb_nodeWhereUniqueInput!
  data: pcb_nodeUpdateInput!
}

input pcb_nodeCreateInput {
  integration_id: String
  fabrication_date: DateTime
  picture: ImageFieldInput
  status: String
  gps_node: gps_nodeRelateToOneForCreateInput
  firmware_version: node_firmware_versionRelateToOneForCreateInput
  hardware_version: node_hardware_versionRelateToOneForCreateInput
}

input node_firmware_versionRelateToOneForCreateInput {
  create: node_firmware_versionCreateInput
  connect: node_firmware_versionWhereUniqueInput
}

input node_hardware_versionRelateToOneForCreateInput {
  create: node_hardware_versionCreateInput
  connect: node_hardware_versionWhereUniqueInput
}

type pressure_sensor {
  id: ID!
  integration_id: String
  status: String
  comments: String
  order: Int
  image: ImageFieldOutput
  irrigator: irrigator
  pressure_sensor_type: pressure_sensor_type
  storage_location: storage_location
  hdw_issue: hdw_issue
  install_uninstall_request: install_uninstall_request
  installed_in_repair(
    where: repairWhereInput! = {}
    orderBy: [repairOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [repair!]
  installed_in_repairCount(where: repairWhereInput! = {}): Int
  stock_movement(
    where: stock_movementWhereInput! = {}
    orderBy: [stock_movementOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [stock_movement!]
  stock_movementCount(where: stock_movementWhereInput! = {}): Int
}

input pressure_sensorWhereUniqueInput {
  id: ID
  integration_id: String
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input pressure_sensorWhereInput {
  AND: [pressure_sensorWhereInput!]
  OR: [pressure_sensorWhereInput!]
  NOT: [pressure_sensorWhereInput!]
  id: IDFilter
  integration_id: StringFilter
  status: StringFilter
  comments: StringFilter
  order: IntNullableFilter
  irrigator: irrigatorWhereInput
  pressure_sensor_type: pressure_sensor_typeWhereInput
  storage_location: storage_locationWhereInput
  hdw_issue: hdw_issueWhereInput
  install_uninstall_request: install_uninstall_requestWhereInput
  installed_in_repair: repairManyRelationFilter
  stock_movement: stock_movementManyRelationFilter
}

input pressure_sensorOrderByInput {
  id: OrderDirection
  integration_id: OrderDirection
  status: OrderDirection
  comments: OrderDirection
  order: OrderDirection
}

input pressure_sensorUpdateInput {
  integration_id: String
  status: String
  comments: String
  order: Int
  image: ImageFieldInput
  irrigator: irrigatorRelateToOneForUpdateInput
  pressure_sensor_type: pressure_sensor_typeRelateToOneForUpdateInput
  storage_location: storage_locationRelateToOneForUpdateInput
  hdw_issue: hdw_issueRelateToOneForUpdateInput
  install_uninstall_request: install_uninstall_requestRelateToOneForUpdateInput
  installed_in_repair: repairRelateToManyForUpdateInput
  stock_movement: stock_movementRelateToManyForUpdateInput
}

input pressure_sensor_typeRelateToOneForUpdateInput {
  create: pressure_sensor_typeCreateInput
  connect: pressure_sensor_typeWhereUniqueInput
  disconnect: Boolean
}

input pressure_sensorUpdateArgs {
  where: pressure_sensorWhereUniqueInput!
  data: pressure_sensorUpdateInput!
}

input pressure_sensorCreateInput {
  integration_id: String
  status: String
  comments: String
  order: Int
  image: ImageFieldInput
  irrigator: irrigatorRelateToOneForCreateInput
  pressure_sensor_type: pressure_sensor_typeRelateToOneForCreateInput
  storage_location: storage_locationRelateToOneForCreateInput
  hdw_issue: hdw_issueRelateToOneForCreateInput
  install_uninstall_request: install_uninstall_requestRelateToOneForCreateInput
  installed_in_repair: repairRelateToManyForCreateInput
  stock_movement: stock_movementRelateToManyForCreateInput
}

input pressure_sensor_typeRelateToOneForCreateInput {
  create: pressure_sensor_typeCreateInput
  connect: pressure_sensor_typeWhereUniqueInput
}

type pressure_sensor_type {
  id: ID!
  name: String
}

input pressure_sensor_typeWhereUniqueInput {
  id: ID
  name: String
}

input pressure_sensor_typeWhereInput {
  AND: [pressure_sensor_typeWhereInput!]
  OR: [pressure_sensor_typeWhereInput!]
  NOT: [pressure_sensor_typeWhereInput!]
  id: IDFilter
  name: StringFilter
}

input pressure_sensor_typeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input pressure_sensor_typeUpdateInput {
  name: String
}

input pressure_sensor_typeUpdateArgs {
  where: pressure_sensor_typeWhereUniqueInput!
  data: pressure_sensor_typeUpdateInput!
}

input pressure_sensor_typeCreateInput {
  name: String
}

type province {
  id: ID!
  name: String
  city(
    where: cityWhereInput! = {}
    orderBy: [cityOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [city!]
  cityCount(where: cityWhereInput! = {}): Int
}

input provinceWhereUniqueInput {
  id: ID
}

input provinceWhereInput {
  AND: [provinceWhereInput!]
  OR: [provinceWhereInput!]
  NOT: [provinceWhereInput!]
  id: IDFilter
  name: StringFilter
  city: cityManyRelationFilter
}

input cityManyRelationFilter {
  every: cityWhereInput
  some: cityWhereInput
  none: cityWhereInput
}

input provinceOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input provinceUpdateInput {
  name: String
  city: cityRelateToManyForUpdateInput
}

input cityRelateToManyForUpdateInput {
  disconnect: [cityWhereUniqueInput!]
  set: [cityWhereUniqueInput!]
  create: [cityCreateInput!]
  connect: [cityWhereUniqueInput!]
}

input provinceUpdateArgs {
  where: provinceWhereUniqueInput!
  data: provinceUpdateInput!
}

input provinceCreateInput {
  name: String
  city: cityRelateToManyForCreateInput
}

input cityRelateToManyForCreateInput {
  create: [cityCreateInput!]
  connect: [cityWhereUniqueInput!]
}

type repair {
  id: ID!
  creation_date: DateTime
  real_repair_date: DateTime
  hdw_issue: hdw_issue
  repair_type: repair_type
  solution_type: solution_type
  new_gateway: gateway
  new_gps_node: gps_node
  new_pressure_sensor: pressure_sensor
  work_order: work_order
  comments: String
  log: FileFieldOutput
}

input repairWhereUniqueInput {
  id: ID
}

type LocalFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type CloudFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input repairWhereInput {
  AND: [repairWhereInput!]
  OR: [repairWhereInput!]
  NOT: [repairWhereInput!]
  id: IDFilter
  creation_date: DateTimeFilter
  real_repair_date: DateTimeFilter
  hdw_issue: hdw_issueWhereInput
  repair_type: repair_typeWhereInput
  solution_type: solution_typeWhereInput
  new_gateway: gatewayWhereInput
  new_gps_node: gps_nodeWhereInput
  new_pressure_sensor: pressure_sensorWhereInput
  work_order: work_orderWhereInput
  comments: StringFilter
}

input repairOrderByInput {
  id: OrderDirection
  creation_date: OrderDirection
  real_repair_date: OrderDirection
  comments: OrderDirection
}

input repairUpdateInput {
  creation_date: DateTime
  real_repair_date: DateTime
  hdw_issue: hdw_issueRelateToOneForUpdateInput
  repair_type: repair_typeRelateToOneForUpdateInput
  solution_type: solution_typeRelateToOneForUpdateInput
  new_gateway: gatewayRelateToOneForUpdateInput
  new_gps_node: gps_nodeRelateToOneForUpdateInput
  new_pressure_sensor: pressure_sensorRelateToOneForUpdateInput
  work_order: work_orderRelateToOneForUpdateInput
  comments: String
  log: FileFieldInput
}

input repair_typeRelateToOneForUpdateInput {
  create: repair_typeCreateInput
  connect: repair_typeWhereUniqueInput
  disconnect: Boolean
}

input solution_typeRelateToOneForUpdateInput {
  create: solution_typeCreateInput
  connect: solution_typeWhereUniqueInput
  disconnect: Boolean
}

input repairUpdateArgs {
  where: repairWhereUniqueInput!
  data: repairUpdateInput!
}

input repairCreateInput {
  creation_date: DateTime
  real_repair_date: DateTime
  hdw_issue: hdw_issueRelateToOneForCreateInput
  repair_type: repair_typeRelateToOneForCreateInput
  solution_type: solution_typeRelateToOneForCreateInput
  new_gateway: gatewayRelateToOneForCreateInput
  new_gps_node: gps_nodeRelateToOneForCreateInput
  new_pressure_sensor: pressure_sensorRelateToOneForCreateInput
  work_order: work_orderRelateToOneForCreateInput
  comments: String
  log: FileFieldInput
}

input repair_typeRelateToOneForCreateInput {
  create: repair_typeCreateInput
  connect: repair_typeWhereUniqueInput
}

input solution_typeRelateToOneForCreateInput {
  create: solution_typeCreateInput
  connect: solution_typeWhereUniqueInput
}

type repair_type {
  id: ID!
  name: String
  value: String
}

input repair_typeWhereUniqueInput {
  id: ID
  name: String
  value: String
}

input repair_typeWhereInput {
  AND: [repair_typeWhereInput!]
  OR: [repair_typeWhereInput!]
  NOT: [repair_typeWhereInput!]
  id: IDFilter
  name: StringFilter
  value: StringFilter
}

input repair_typeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  value: OrderDirection
}

input repair_typeUpdateInput {
  name: String
  value: String
}

input repair_typeUpdateArgs {
  where: repair_typeWhereUniqueInput!
  data: repair_typeUpdateInput!
}

input repair_typeCreateInput {
  name: String
  value: String
}

type satellite_modem {
  id: ID!
  integration_id: String
  shipment_date: DateTime
  is_transmitting: Boolean
  comment: String
  satellite_modem_type: satellite_modem_type
  gateway: gateway
}

input satellite_modemWhereUniqueInput {
  id: ID
  integration_id: String
}

input satellite_modemWhereInput {
  AND: [satellite_modemWhereInput!]
  OR: [satellite_modemWhereInput!]
  NOT: [satellite_modemWhereInput!]
  id: IDFilter
  integration_id: StringFilter
  shipment_date: DateTimeFilter
  is_transmitting: BooleanFilter
  comment: StringFilter
  satellite_modem_type: satellite_modem_typeWhereInput
  gateway: gatewayWhereInput
}

input satellite_modemOrderByInput {
  id: OrderDirection
  integration_id: OrderDirection
  shipment_date: OrderDirection
  is_transmitting: OrderDirection
  comment: OrderDirection
}

input satellite_modemUpdateInput {
  integration_id: String
  shipment_date: DateTime
  is_transmitting: Boolean
  comment: String
  satellite_modem_type: satellite_modem_typeRelateToOneForUpdateInput
  gateway: gatewayRelateToOneForUpdateInput
}

input satellite_modem_typeRelateToOneForUpdateInput {
  create: satellite_modem_typeCreateInput
  connect: satellite_modem_typeWhereUniqueInput
  disconnect: Boolean
}

input satellite_modemUpdateArgs {
  where: satellite_modemWhereUniqueInput!
  data: satellite_modemUpdateInput!
}

input satellite_modemCreateInput {
  integration_id: String
  shipment_date: DateTime
  is_transmitting: Boolean
  comment: String
  satellite_modem_type: satellite_modem_typeRelateToOneForCreateInput
  gateway: gatewayRelateToOneForCreateInput
}

input satellite_modem_typeRelateToOneForCreateInput {
  create: satellite_modem_typeCreateInput
  connect: satellite_modem_typeWhereUniqueInput
}

type satellite_modem_type {
  id: ID!
  reference_number: String
  version: String
  label: String
  satellite_modem(
    where: satellite_modemWhereInput! = {}
    orderBy: [satellite_modemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [satellite_modem!]
  satellite_modemCount(where: satellite_modemWhereInput! = {}): Int
}

input satellite_modem_typeWhereUniqueInput {
  id: ID
  reference_number: String
  version: String
}

input satellite_modem_typeWhereInput {
  AND: [satellite_modem_typeWhereInput!]
  OR: [satellite_modem_typeWhereInput!]
  NOT: [satellite_modem_typeWhereInput!]
  id: IDFilter
  reference_number: StringFilter
  version: StringFilter
  satellite_modem: satellite_modemManyRelationFilter
}

input satellite_modemManyRelationFilter {
  every: satellite_modemWhereInput
  some: satellite_modemWhereInput
  none: satellite_modemWhereInput
}

input satellite_modem_typeOrderByInput {
  id: OrderDirection
  reference_number: OrderDirection
  version: OrderDirection
}

input satellite_modem_typeUpdateInput {
  reference_number: String
  version: String
  satellite_modem: satellite_modemRelateToManyForUpdateInput
}

input satellite_modemRelateToManyForUpdateInput {
  disconnect: [satellite_modemWhereUniqueInput!]
  set: [satellite_modemWhereUniqueInput!]
  create: [satellite_modemCreateInput!]
  connect: [satellite_modemWhereUniqueInput!]
}

input satellite_modem_typeUpdateArgs {
  where: satellite_modem_typeWhereUniqueInput!
  data: satellite_modem_typeUpdateInput!
}

input satellite_modem_typeCreateInput {
  reference_number: String
  version: String
  satellite_modem: satellite_modemRelateToManyForCreateInput
}

input satellite_modemRelateToManyForCreateInput {
  create: [satellite_modemCreateInput!]
  connect: [satellite_modemWhereUniqueInput!]
}

type satellite_antenna {
  id: ID!
  integration_id: String
  gateway: gateway
}

input satellite_antennaWhereUniqueInput {
  id: ID
  integration_id: String
}

input satellite_antennaWhereInput {
  AND: [satellite_antennaWhereInput!]
  OR: [satellite_antennaWhereInput!]
  NOT: [satellite_antennaWhereInput!]
  id: IDFilter
  integration_id: StringFilter
  gateway: gatewayWhereInput
}

input satellite_antennaOrderByInput {
  id: OrderDirection
  integration_id: OrderDirection
}

input satellite_antennaUpdateInput {
  integration_id: String
  gateway: gatewayRelateToOneForUpdateInput
}

input satellite_antennaUpdateArgs {
  where: satellite_antennaWhereUniqueInput!
  data: satellite_antennaUpdateInput!
}

input satellite_antennaCreateInput {
  integration_id: String
  gateway: gatewayRelateToOneForCreateInput
}

type solar_panel_type {
  id: ID!
  name: String
}

input solar_panel_typeWhereUniqueInput {
  id: ID
  name: String
}

input solar_panel_typeWhereInput {
  AND: [solar_panel_typeWhereInput!]
  OR: [solar_panel_typeWhereInput!]
  NOT: [solar_panel_typeWhereInput!]
  id: IDFilter
  name: StringFilter
}

input solar_panel_typeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input solar_panel_typeUpdateInput {
  name: String
}

input solar_panel_typeUpdateArgs {
  where: solar_panel_typeWhereUniqueInput!
  data: solar_panel_typeUpdateInput!
}

input solar_panel_typeCreateInput {
  name: String
}

type solution_type {
  id: ID!
  name: String
}

input solution_typeWhereUniqueInput {
  id: ID
  name: String
}

input solution_typeWhereInput {
  AND: [solution_typeWhereInput!]
  OR: [solution_typeWhereInput!]
  NOT: [solution_typeWhereInput!]
  id: IDFilter
  name: StringFilter
}

input solution_typeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input solution_typeUpdateInput {
  name: String
}

input solution_typeUpdateArgs {
  where: solution_typeWhereUniqueInput!
  data: solution_typeUpdateInput!
}

input solution_typeCreateInput {
  name: String
}

type storage_location {
  id: ID!
  name: String
  lat: Float
  long: Float
  gateway(
    where: gatewayWhereInput! = {}
    orderBy: [gatewayOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [gateway!]
  gatewayCount(where: gatewayWhereInput! = {}): Int
  gps_node(
    where: gps_nodeWhereInput! = {}
    orderBy: [gps_nodeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [gps_node!]
  gps_nodeCount(where: gps_nodeWhereInput! = {}): Int
  pressure_sensor(
    where: pressure_sensorWhereInput! = {}
    orderBy: [pressure_sensorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [pressure_sensor!]
  pressure_sensorCount(where: pressure_sensorWhereInput! = {}): Int
  user: user
  stock_movement_from(
    where: stock_movementWhereInput! = {}
    orderBy: [stock_movementOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [stock_movement!]
  stock_movement_fromCount(where: stock_movementWhereInput! = {}): Int
  stock_movement_to(
    where: stock_movementWhereInput! = {}
    orderBy: [stock_movementOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [stock_movement!]
  stock_movement_toCount(where: stock_movementWhereInput! = {}): Int
}

input storage_locationWhereUniqueInput {
  id: ID
  name: String
}

input storage_locationWhereInput {
  AND: [storage_locationWhereInput!]
  OR: [storage_locationWhereInput!]
  NOT: [storage_locationWhereInput!]
  id: IDFilter
  name: StringFilter
  lat: FloatNullableFilter
  long: FloatNullableFilter
  gateway: gatewayManyRelationFilter
  gps_node: gps_nodeManyRelationFilter
  pressure_sensor: pressure_sensorManyRelationFilter
  user: userWhereInput
  stock_movement_from: stock_movementManyRelationFilter
  stock_movement_to: stock_movementManyRelationFilter
}

input gatewayManyRelationFilter {
  every: gatewayWhereInput
  some: gatewayWhereInput
  none: gatewayWhereInput
}

input gps_nodeManyRelationFilter {
  every: gps_nodeWhereInput
  some: gps_nodeWhereInput
  none: gps_nodeWhereInput
}

input pressure_sensorManyRelationFilter {
  every: pressure_sensorWhereInput
  some: pressure_sensorWhereInput
  none: pressure_sensorWhereInput
}

input storage_locationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  lat: OrderDirection
  long: OrderDirection
}

input storage_locationUpdateInput {
  name: String
  lat: Float
  long: Float
  gateway: gatewayRelateToManyForUpdateInput
  gps_node: gps_nodeRelateToManyForUpdateInput
  pressure_sensor: pressure_sensorRelateToManyForUpdateInput
  user: userRelateToOneForUpdateInput
  stock_movement_from: stock_movementRelateToManyForUpdateInput
  stock_movement_to: stock_movementRelateToManyForUpdateInput
}

input gatewayRelateToManyForUpdateInput {
  disconnect: [gatewayWhereUniqueInput!]
  set: [gatewayWhereUniqueInput!]
  create: [gatewayCreateInput!]
  connect: [gatewayWhereUniqueInput!]
}

input gps_nodeRelateToManyForUpdateInput {
  disconnect: [gps_nodeWhereUniqueInput!]
  set: [gps_nodeWhereUniqueInput!]
  create: [gps_nodeCreateInput!]
  connect: [gps_nodeWhereUniqueInput!]
}

input pressure_sensorRelateToManyForUpdateInput {
  disconnect: [pressure_sensorWhereUniqueInput!]
  set: [pressure_sensorWhereUniqueInput!]
  create: [pressure_sensorCreateInput!]
  connect: [pressure_sensorWhereUniqueInput!]
}

input storage_locationUpdateArgs {
  where: storage_locationWhereUniqueInput!
  data: storage_locationUpdateInput!
}

input storage_locationCreateInput {
  name: String
  lat: Float
  long: Float
  gateway: gatewayRelateToManyForCreateInput
  gps_node: gps_nodeRelateToManyForCreateInput
  pressure_sensor: pressure_sensorRelateToManyForCreateInput
  user: userRelateToOneForCreateInput
  stock_movement_from: stock_movementRelateToManyForCreateInput
  stock_movement_to: stock_movementRelateToManyForCreateInput
}

input gatewayRelateToManyForCreateInput {
  create: [gatewayCreateInput!]
  connect: [gatewayWhereUniqueInput!]
}

input gps_nodeRelateToManyForCreateInput {
  create: [gps_nodeCreateInput!]
  connect: [gps_nodeWhereUniqueInput!]
}

input pressure_sensorRelateToManyForCreateInput {
  create: [pressure_sensorCreateInput!]
  connect: [pressure_sensorWhereUniqueInput!]
}

type stock_movement {
  id: ID!
  date: DateTime
  location_from: storage_location
  location_to: storage_location
  gateway: gateway
  gps_node: gps_node
  pressure_sensor: pressure_sensor
  author: user
}

input stock_movementWhereUniqueInput {
  id: ID
}

input stock_movementWhereInput {
  AND: [stock_movementWhereInput!]
  OR: [stock_movementWhereInput!]
  NOT: [stock_movementWhereInput!]
  id: IDFilter
  date: DateTimeFilter
  location_from: storage_locationWhereInput
  location_to: storage_locationWhereInput
  gateway: gatewayWhereInput
  gps_node: gps_nodeWhereInput
  pressure_sensor: pressure_sensorWhereInput
  author: userWhereInput
}

input stock_movementOrderByInput {
  id: OrderDirection
  date: OrderDirection
}

input stock_movementUpdateInput {
  date: DateTime
  location_from: storage_locationRelateToOneForUpdateInput
  location_to: storage_locationRelateToOneForUpdateInput
  gateway: gatewayRelateToOneForUpdateInput
  gps_node: gps_nodeRelateToOneForUpdateInput
  pressure_sensor: pressure_sensorRelateToOneForUpdateInput
  author: userRelateToOneForUpdateInput
}

input stock_movementUpdateArgs {
  where: stock_movementWhereUniqueInput!
  data: stock_movementUpdateInput!
}

input stock_movementCreateInput {
  date: DateTime
  location_from: storage_locationRelateToOneForCreateInput
  location_to: storage_locationRelateToOneForCreateInput
  gateway: gatewayRelateToOneForCreateInput
  gps_node: gps_nodeRelateToOneForCreateInput
  pressure_sensor: pressure_sensorRelateToOneForCreateInput
  author: userRelateToOneForCreateInput
}

type user {
  id: ID!
  name: String
  email: String
  password: PasswordState
  type: String
  diagnostic(
    where: diagnosticWhereInput! = {}
    orderBy: [diagnosticOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [diagnostic!]
  diagnosticCount(where: diagnosticWhereInput! = {}): Int
  autopsy(
    where: autopsyWhereInput! = {}
    orderBy: [autopsyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [autopsy!]
  autopsyCount(where: autopsyWhereInput! = {}): Int
  created_stock_movement(
    where: stock_movementWhereInput! = {}
    orderBy: [stock_movementOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [stock_movement!]
  created_stock_movementCount(where: stock_movementWhereInput! = {}): Int
  hdw_issue(
    where: hdw_issueWhereInput! = {}
    orderBy: [hdw_issueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [hdw_issue!]
  hdw_issueCount(where: hdw_issueWhereInput! = {}): Int
  install_uninstall_request(
    where: install_uninstall_requestWhereInput! = {}
    orderBy: [install_uninstall_requestOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [install_uninstall_request!]
  install_uninstall_requestCount(
    where: install_uninstall_requestWhereInput! = {}
  ): Int
  inspection(
    where: inspectionWhereInput! = {}
    orderBy: [inspectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [inspection!]
  inspectionCount(where: inspectionWhereInput! = {}): Int
  zone(
    where: zoneWhereInput! = {}
    orderBy: [zoneOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [zone!]
  zoneCount(where: zoneWhereInput! = {}): Int
  storage_location: storage_location
  work_order(
    where: work_orderWhereInput! = {}
    orderBy: [work_orderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [work_order!]
  work_orderCount(where: work_orderWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input userWhereUniqueInput {
  id: ID
  email: String
}

input userWhereInput {
  AND: [userWhereInput!]
  OR: [userWhereInput!]
  NOT: [userWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  type: StringFilter
  diagnostic: diagnosticManyRelationFilter
  autopsy: autopsyManyRelationFilter
  created_stock_movement: stock_movementManyRelationFilter
  hdw_issue: hdw_issueManyRelationFilter
  install_uninstall_request: install_uninstall_requestManyRelationFilter
  inspection: inspectionManyRelationFilter
  zone: zoneManyRelationFilter
  storage_location: storage_locationWhereInput
  work_order: work_orderManyRelationFilter
}

input diagnosticManyRelationFilter {
  every: diagnosticWhereInput
  some: diagnosticWhereInput
  none: diagnosticWhereInput
}

input zoneManyRelationFilter {
  every: zoneWhereInput
  some: zoneWhereInput
  none: zoneWhereInput
}

input work_orderManyRelationFilter {
  every: work_orderWhereInput
  some: work_orderWhereInput
  none: work_orderWhereInput
}

input userOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  type: OrderDirection
}

input userUpdateInput {
  name: String
  email: String
  password: String
  type: String
  diagnostic: diagnosticRelateToManyForUpdateInput
  autopsy: autopsyRelateToManyForUpdateInput
  created_stock_movement: stock_movementRelateToManyForUpdateInput
  hdw_issue: hdw_issueRelateToManyForUpdateInput
  install_uninstall_request: install_uninstall_requestRelateToManyForUpdateInput
  inspection: inspectionRelateToManyForUpdateInput
  zone: zoneRelateToManyForUpdateInput
  storage_location: storage_locationRelateToOneForUpdateInput
  work_order: work_orderRelateToManyForUpdateInput
}

input diagnosticRelateToManyForUpdateInput {
  disconnect: [diagnosticWhereUniqueInput!]
  set: [diagnosticWhereUniqueInput!]
  create: [diagnosticCreateInput!]
  connect: [diagnosticWhereUniqueInput!]
}

input zoneRelateToManyForUpdateInput {
  disconnect: [zoneWhereUniqueInput!]
  set: [zoneWhereUniqueInput!]
  create: [zoneCreateInput!]
  connect: [zoneWhereUniqueInput!]
}

input work_orderRelateToManyForUpdateInput {
  disconnect: [work_orderWhereUniqueInput!]
  set: [work_orderWhereUniqueInput!]
  create: [work_orderCreateInput!]
  connect: [work_orderWhereUniqueInput!]
}

input userUpdateArgs {
  where: userWhereUniqueInput!
  data: userUpdateInput!
}

input userCreateInput {
  name: String
  email: String
  password: String
  type: String
  diagnostic: diagnosticRelateToManyForCreateInput
  autopsy: autopsyRelateToManyForCreateInput
  created_stock_movement: stock_movementRelateToManyForCreateInput
  hdw_issue: hdw_issueRelateToManyForCreateInput
  install_uninstall_request: install_uninstall_requestRelateToManyForCreateInput
  inspection: inspectionRelateToManyForCreateInput
  zone: zoneRelateToManyForCreateInput
  storage_location: storage_locationRelateToOneForCreateInput
  work_order: work_orderRelateToManyForCreateInput
}

input diagnosticRelateToManyForCreateInput {
  create: [diagnosticCreateInput!]
  connect: [diagnosticWhereUniqueInput!]
}

input zoneRelateToManyForCreateInput {
  create: [zoneCreateInput!]
  connect: [zoneWhereUniqueInput!]
}

input work_orderRelateToManyForCreateInput {
  create: [work_orderCreateInput!]
  connect: [work_orderWhereUniqueInput!]
}

type work_order {
  id: ID!
  work_date: DateTime
  km_traveled: Float
  comment: String
  install_uninstall_request(
    where: install_uninstall_requestWhereInput! = {}
    orderBy: [install_uninstall_requestOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [install_uninstall_request!]
  install_uninstall_requestCount(
    where: install_uninstall_requestWhereInput! = {}
  ): Int
  repair(
    where: repairWhereInput! = {}
    orderBy: [repairOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [repair!]
  repairCount(where: repairWhereInput! = {}): Int
  technician: user
}

input work_orderWhereUniqueInput {
  id: ID
}

input work_orderWhereInput {
  AND: [work_orderWhereInput!]
  OR: [work_orderWhereInput!]
  NOT: [work_orderWhereInput!]
  id: IDFilter
  work_date: DateTimeFilter
  km_traveled: FloatFilter
  comment: StringFilter
  install_uninstall_request: install_uninstall_requestManyRelationFilter
  repair: repairManyRelationFilter
  technician: userWhereInput
}

input work_orderOrderByInput {
  id: OrderDirection
  work_date: OrderDirection
  km_traveled: OrderDirection
  comment: OrderDirection
}

input work_orderUpdateInput {
  work_date: DateTime
  km_traveled: Float
  comment: String
  install_uninstall_request: install_uninstall_requestRelateToManyForUpdateInput
  repair: repairRelateToManyForUpdateInput
  technician: userRelateToOneForUpdateInput
}

input work_orderUpdateArgs {
  where: work_orderWhereUniqueInput!
  data: work_orderUpdateInput!
}

input work_orderCreateInput {
  work_date: DateTime
  km_traveled: Float
  comment: String
  install_uninstall_request: install_uninstall_requestRelateToManyForCreateInput
  repair: repairRelateToManyForCreateInput
  technician: userRelateToOneForCreateInput
}

type zone {
  id: ID!
  name: String
  code: String
  is_foreign: Boolean
  field(
    where: fieldWhereInput! = {}
    orderBy: [fieldOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [field!]
  fieldCount(where: fieldWhereInput! = {}): Int
  user(
    where: userWhereInput! = {}
    orderBy: [userOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [user!]
  userCount(where: userWhereInput! = {}): Int
}

input zoneWhereUniqueInput {
  id: ID
}

input zoneWhereInput {
  AND: [zoneWhereInput!]
  OR: [zoneWhereInput!]
  NOT: [zoneWhereInput!]
  id: IDFilter
  name: StringFilter
  code: StringFilter
  is_foreign: BooleanFilter
  field: fieldManyRelationFilter
  user: userManyRelationFilter
}

input userManyRelationFilter {
  every: userWhereInput
  some: userWhereInput
  none: userWhereInput
}

input zoneOrderByInput {
  id: OrderDirection
  name: OrderDirection
  code: OrderDirection
  is_foreign: OrderDirection
}

input zoneUpdateInput {
  name: String
  code: String
  is_foreign: Boolean
  field: fieldRelateToManyForUpdateInput
  user: userRelateToManyForUpdateInput
}

input userRelateToManyForUpdateInput {
  disconnect: [userWhereUniqueInput!]
  set: [userWhereUniqueInput!]
  create: [userCreateInput!]
  connect: [userWhereUniqueInput!]
}

input zoneUpdateArgs {
  where: zoneWhereUniqueInput!
  data: zoneUpdateInput!
}

input zoneCreateInput {
  name: String
  code: String
  is_foreign: Boolean
  field: fieldRelateToManyForCreateInput
  user: userRelateToManyForCreateInput
}

input userRelateToManyForCreateInput {
  create: [userCreateInput!]
  connect: [userWhereUniqueInput!]
}

type contract {
  id: ID!
  hubspot_id: String
  creation_date: DateTime
  start_date: DateTime
  end_date: DateTime
  actual_install_date: DateTime
  actual_uninstall_date: DateTime
  name: String
  irrigator_quantity: Int
  irrigator(
    where: irrigatorWhereInput! = {}
    orderBy: [irrigatorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [irrigator!]
  irrigatorCount(where: irrigatorWhereInput! = {}): Int
  service_level_agreement: service_level_agreement
  contract_type: String
}

input contractWhereUniqueInput {
  id: ID
  hubspot_id: String
}

input contractWhereInput {
  AND: [contractWhereInput!]
  OR: [contractWhereInput!]
  NOT: [contractWhereInput!]
  id: IDFilter
  hubspot_id: StringFilter
  creation_date: DateTimeFilter
  start_date: DateTimeFilter
  end_date: DateTimeFilter
  actual_install_date: DateTimeNullableFilter
  actual_uninstall_date: DateTimeNullableFilter
  name: StringFilter
  irrigator_quantity: IntNullableFilter
  irrigator: irrigatorManyRelationFilter
  service_level_agreement: service_level_agreementWhereInput
  contract_type: StringFilter
}

input contractOrderByInput {
  id: OrderDirection
  hubspot_id: OrderDirection
  creation_date: OrderDirection
  start_date: OrderDirection
  end_date: OrderDirection
  actual_install_date: OrderDirection
  actual_uninstall_date: OrderDirection
  name: OrderDirection
  irrigator_quantity: OrderDirection
  contract_type: OrderDirection
}

input contractUpdateInput {
  hubspot_id: String
  creation_date: DateTime
  start_date: DateTime
  end_date: DateTime
  actual_install_date: DateTime
  actual_uninstall_date: DateTime
  name: String
  irrigator_quantity: Int
  irrigator: irrigatorRelateToManyForUpdateInput
  service_level_agreement: service_level_agreementRelateToOneForUpdateInput
  contract_type: String
}

input service_level_agreementRelateToOneForUpdateInput {
  create: service_level_agreementCreateInput
  connect: service_level_agreementWhereUniqueInput
  disconnect: Boolean
}

input contractUpdateArgs {
  where: contractWhereUniqueInput!
  data: contractUpdateInput!
}

input contractCreateInput {
  hubspot_id: String
  creation_date: DateTime
  start_date: DateTime
  end_date: DateTime
  actual_install_date: DateTime
  actual_uninstall_date: DateTime
  name: String
  irrigator_quantity: Int
  irrigator: irrigatorRelateToManyForCreateInput
  service_level_agreement: service_level_agreementRelateToOneForCreateInput
  contract_type: String
}

input service_level_agreementRelateToOneForCreateInput {
  create: service_level_agreementCreateInput
  connect: service_level_agreementWhereUniqueInput
}

type service_level_agreement {
  id: ID!
  name: String
  contract(
    where: contractWhereInput! = {}
    orderBy: [contractOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [contract!]
  contractCount(where: contractWhereInput! = {}): Int
}

input service_level_agreementWhereUniqueInput {
  id: ID
  name: String
}

input service_level_agreementWhereInput {
  AND: [service_level_agreementWhereInput!]
  OR: [service_level_agreementWhereInput!]
  NOT: [service_level_agreementWhereInput!]
  id: IDFilter
  name: StringFilter
  contract: contractManyRelationFilter
}

input contractManyRelationFilter {
  every: contractWhereInput
  some: contractWhereInput
  none: contractWhereInput
}

input service_level_agreementOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input service_level_agreementUpdateInput {
  name: String
  contract: contractRelateToManyForUpdateInput
}

input contractRelateToManyForUpdateInput {
  disconnect: [contractWhereUniqueInput!]
  set: [contractWhereUniqueInput!]
  create: [contractCreateInput!]
  connect: [contractWhereUniqueInput!]
}

input service_level_agreementUpdateArgs {
  where: service_level_agreementWhereUniqueInput!
  data: service_level_agreementUpdateInput!
}

input service_level_agreementCreateInput {
  name: String
  contract: contractRelateToManyForCreateInput
}

input contractRelateToManyForCreateInput {
  create: [contractCreateInput!]
  connect: [contractWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createasset_type(data: asset_typeCreateInput!): asset_type
  createAssetTypes(data: [asset_typeCreateInput!]!): [asset_type]
  updateasset_type(
    where: asset_typeWhereUniqueInput!
    data: asset_typeUpdateInput!
  ): asset_type
  updateAssetTypes(data: [asset_typeUpdateArgs!]!): [asset_type]
  deleteasset_type(where: asset_typeWhereUniqueInput!): asset_type
  deleteAssetTypes(where: [asset_typeWhereUniqueInput!]!): [asset_type]
  createautopsy(data: autopsyCreateInput!): autopsy
  createAutopsies(data: [autopsyCreateInput!]!): [autopsy]
  updateautopsy(
    where: autopsyWhereUniqueInput!
    data: autopsyUpdateInput!
  ): autopsy
  updateAutopsies(data: [autopsyUpdateArgs!]!): [autopsy]
  deleteautopsy(where: autopsyWhereUniqueInput!): autopsy
  deleteAutopsies(where: [autopsyWhereUniqueInput!]!): [autopsy]
  createautopsy_type(data: autopsy_typeCreateInput!): autopsy_type
  createAutopsyTypes(data: [autopsy_typeCreateInput!]!): [autopsy_type]
  updateautopsy_type(
    where: autopsy_typeWhereUniqueInput!
    data: autopsy_typeUpdateInput!
  ): autopsy_type
  updateAutopsyTypes(data: [autopsy_typeUpdateArgs!]!): [autopsy_type]
  deleteautopsy_type(where: autopsy_typeWhereUniqueInput!): autopsy_type
  deleteAutopsyTypes(where: [autopsy_typeWhereUniqueInput!]!): [autopsy_type]
  createautopsy_root(data: autopsy_rootCreateInput!): autopsy_root
  createAutopsyRoots(data: [autopsy_rootCreateInput!]!): [autopsy_root]
  updateautopsy_root(
    where: autopsy_rootWhereUniqueInput!
    data: autopsy_rootUpdateInput!
  ): autopsy_root
  updateAutopsyRoots(data: [autopsy_rootUpdateArgs!]!): [autopsy_root]
  deleteautopsy_root(where: autopsy_rootWhereUniqueInput!): autopsy_root
  deleteAutopsyRoots(where: [autopsy_rootWhereUniqueInput!]!): [autopsy_root]
  createbattery_type(data: battery_typeCreateInput!): battery_type
  createBatteryTypes(data: [battery_typeCreateInput!]!): [battery_type]
  updatebattery_type(
    where: battery_typeWhereUniqueInput!
    data: battery_typeUpdateInput!
  ): battery_type
  updateBatteryTypes(data: [battery_typeUpdateArgs!]!): [battery_type]
  deletebattery_type(where: battery_typeWhereUniqueInput!): battery_type
  deleteBatteryTypes(where: [battery_typeWhereUniqueInput!]!): [battery_type]
  createcity(data: cityCreateInput!): city
  createCities(data: [cityCreateInput!]!): [city]
  updatecity(where: cityWhereUniqueInput!, data: cityUpdateInput!): city
  updateCities(data: [cityUpdateArgs!]!): [city]
  deletecity(where: cityWhereUniqueInput!): city
  deleteCities(where: [cityWhereUniqueInput!]!): [city]
  createclient(data: clientCreateInput!): client
  createClients(data: [clientCreateInput!]!): [client]
  updateclient(where: clientWhereUniqueInput!, data: clientUpdateInput!): client
  updateClients(data: [clientUpdateArgs!]!): [client]
  deleteclient(where: clientWhereUniqueInput!): client
  deleteClients(where: [clientWhereUniqueInput!]!): [client]
  createcomponent_type(data: component_typeCreateInput!): component_type
  createComponentTypes(data: [component_typeCreateInput!]!): [component_type]
  updatecomponent_type(
    where: component_typeWhereUniqueInput!
    data: component_typeUpdateInput!
  ): component_type
  updateComponentTypes(data: [component_typeUpdateArgs!]!): [component_type]
  deletecomponent_type(where: component_typeWhereUniqueInput!): component_type
  deleteComponentTypes(
    where: [component_typeWhereUniqueInput!]!
  ): [component_type]
  creatediagnostic_type(data: diagnostic_typeCreateInput!): diagnostic_type
  createDiagnosticTypes(data: [diagnostic_typeCreateInput!]!): [diagnostic_type]
  updatediagnostic_type(
    where: diagnostic_typeWhereUniqueInput!
    data: diagnostic_typeUpdateInput!
  ): diagnostic_type
  updateDiagnosticTypes(data: [diagnostic_typeUpdateArgs!]!): [diagnostic_type]
  deletediagnostic_type(
    where: diagnostic_typeWhereUniqueInput!
  ): diagnostic_type
  deleteDiagnosticTypes(
    where: [diagnostic_typeWhereUniqueInput!]!
  ): [diagnostic_type]
  creatediagnostic(data: diagnosticCreateInput!): diagnostic
  createDiagnostics(data: [diagnosticCreateInput!]!): [diagnostic]
  updatediagnostic(
    where: diagnosticWhereUniqueInput!
    data: diagnosticUpdateInput!
  ): diagnostic
  updateDiagnostics(data: [diagnosticUpdateArgs!]!): [diagnostic]
  deletediagnostic(where: diagnosticWhereUniqueInput!): diagnostic
  deleteDiagnostics(where: [diagnosticWhereUniqueInput!]!): [diagnostic]
  createfield(data: fieldCreateInput!): field
  createFields(data: [fieldCreateInput!]!): [field]
  updatefield(where: fieldWhereUniqueInput!, data: fieldUpdateInput!): field
  updateFields(data: [fieldUpdateArgs!]!): [field]
  deletefield(where: fieldWhereUniqueInput!): field
  deleteFields(where: [fieldWhereUniqueInput!]!): [field]
  creategateway(data: gatewayCreateInput!): gateway
  createGateways(data: [gatewayCreateInput!]!): [gateway]
  updategateway(
    where: gatewayWhereUniqueInput!
    data: gatewayUpdateInput!
  ): gateway
  updateGateways(data: [gatewayUpdateArgs!]!): [gateway]
  deletegateway(where: gatewayWhereUniqueInput!): gateway
  deleteGateways(where: [gatewayWhereUniqueInput!]!): [gateway]
  creategateway_firmware_version(
    data: gateway_firmware_versionCreateInput!
  ): gateway_firmware_version
  createGatewayFirmwareVersions(
    data: [gateway_firmware_versionCreateInput!]!
  ): [gateway_firmware_version]
  updategateway_firmware_version(
    where: gateway_firmware_versionWhereUniqueInput!
    data: gateway_firmware_versionUpdateInput!
  ): gateway_firmware_version
  updateGatewayFirmwareVersions(
    data: [gateway_firmware_versionUpdateArgs!]!
  ): [gateway_firmware_version]
  deletegateway_firmware_version(
    where: gateway_firmware_versionWhereUniqueInput!
  ): gateway_firmware_version
  deleteGatewayFirmwareVersions(
    where: [gateway_firmware_versionWhereUniqueInput!]!
  ): [gateway_firmware_version]
  creategateway_hardware_version(
    data: gateway_hardware_versionCreateInput!
  ): gateway_hardware_version
  createGatewayHardwareVersions(
    data: [gateway_hardware_versionCreateInput!]!
  ): [gateway_hardware_version]
  updategateway_hardware_version(
    where: gateway_hardware_versionWhereUniqueInput!
    data: gateway_hardware_versionUpdateInput!
  ): gateway_hardware_version
  updateGatewayHardwareVersions(
    data: [gateway_hardware_versionUpdateArgs!]!
  ): [gateway_hardware_version]
  deletegateway_hardware_version(
    where: gateway_hardware_versionWhereUniqueInput!
  ): gateway_hardware_version
  deleteGatewayHardwareVersions(
    where: [gateway_hardware_versionWhereUniqueInput!]!
  ): [gateway_hardware_version]
  creategateway_housing_type(
    data: gateway_housing_typeCreateInput!
  ): gateway_housing_type
  createGatewayHousingTypes(
    data: [gateway_housing_typeCreateInput!]!
  ): [gateway_housing_type]
  updategateway_housing_type(
    where: gateway_housing_typeWhereUniqueInput!
    data: gateway_housing_typeUpdateInput!
  ): gateway_housing_type
  updateGatewayHousingTypes(
    data: [gateway_housing_typeUpdateArgs!]!
  ): [gateway_housing_type]
  deletegateway_housing_type(
    where: gateway_housing_typeWhereUniqueInput!
  ): gateway_housing_type
  deleteGatewayHousingTypes(
    where: [gateway_housing_typeWhereUniqueInput!]!
  ): [gateway_housing_type]
  creategps_antenna_type(data: gps_antenna_typeCreateInput!): gps_antenna_type
  createGpsAntennaTypes(
    data: [gps_antenna_typeCreateInput!]!
  ): [gps_antenna_type]
  updategps_antenna_type(
    where: gps_antenna_typeWhereUniqueInput!
    data: gps_antenna_typeUpdateInput!
  ): gps_antenna_type
  updateGpsAntennaTypes(
    data: [gps_antenna_typeUpdateArgs!]!
  ): [gps_antenna_type]
  deletegps_antenna_type(
    where: gps_antenna_typeWhereUniqueInput!
  ): gps_antenna_type
  deleteGpsAntennaTypes(
    where: [gps_antenna_typeWhereUniqueInput!]!
  ): [gps_antenna_type]
  creategps_node(data: gps_nodeCreateInput!): gps_node
  createGpsNodes(data: [gps_nodeCreateInput!]!): [gps_node]
  updategps_node(
    where: gps_nodeWhereUniqueInput!
    data: gps_nodeUpdateInput!
  ): gps_node
  updateGpsNodes(data: [gps_nodeUpdateArgs!]!): [gps_node]
  deletegps_node(where: gps_nodeWhereUniqueInput!): gps_node
  deleteGpsNodes(where: [gps_nodeWhereUniqueInput!]!): [gps_node]
  createhdw_issue(data: hdw_issueCreateInput!): hdw_issue
  createHdwIssues(data: [hdw_issueCreateInput!]!): [hdw_issue]
  updatehdw_issue(
    where: hdw_issueWhereUniqueInput!
    data: hdw_issueUpdateInput!
  ): hdw_issue
  updateHdwIssues(data: [hdw_issueUpdateArgs!]!): [hdw_issue]
  deletehdw_issue(where: hdw_issueWhereUniqueInput!): hdw_issue
  deleteHdwIssues(where: [hdw_issueWhereUniqueInput!]!): [hdw_issue]
  createinspection(data: inspectionCreateInput!): inspection
  createInspections(data: [inspectionCreateInput!]!): [inspection]
  updateinspection(
    where: inspectionWhereUniqueInput!
    data: inspectionUpdateInput!
  ): inspection
  updateInspections(data: [inspectionUpdateArgs!]!): [inspection]
  deleteinspection(where: inspectionWhereUniqueInput!): inspection
  deleteInspections(where: [inspectionWhereUniqueInput!]!): [inspection]
  createinspection_type(data: inspection_typeCreateInput!): inspection_type
  createInspectionTypes(data: [inspection_typeCreateInput!]!): [inspection_type]
  updateinspection_type(
    where: inspection_typeWhereUniqueInput!
    data: inspection_typeUpdateInput!
  ): inspection_type
  updateInspectionTypes(data: [inspection_typeUpdateArgs!]!): [inspection_type]
  deleteinspection_type(
    where: inspection_typeWhereUniqueInput!
  ): inspection_type
  deleteInspectionTypes(
    where: [inspection_typeWhereUniqueInput!]!
  ): [inspection_type]
  createinstall_uninstall_request(
    data: install_uninstall_requestCreateInput!
  ): install_uninstall_request
  createInstallUninstallRequests(
    data: [install_uninstall_requestCreateInput!]!
  ): [install_uninstall_request]
  updateinstall_uninstall_request(
    where: install_uninstall_requestWhereUniqueInput!
    data: install_uninstall_requestUpdateInput!
  ): install_uninstall_request
  updateInstallUninstallRequests(
    data: [install_uninstall_requestUpdateArgs!]!
  ): [install_uninstall_request]
  deleteinstall_uninstall_request(
    where: install_uninstall_requestWhereUniqueInput!
  ): install_uninstall_request
  deleteInstallUninstallRequests(
    where: [install_uninstall_requestWhereUniqueInput!]!
  ): [install_uninstall_request]
  createirrigator(data: irrigatorCreateInput!): irrigator
  createIrrigators(data: [irrigatorCreateInput!]!): [irrigator]
  updateirrigator(
    where: irrigatorWhereUniqueInput!
    data: irrigatorUpdateInput!
  ): irrigator
  updateIrrigators(data: [irrigatorUpdateArgs!]!): [irrigator]
  deleteirrigator(where: irrigatorWhereUniqueInput!): irrigator
  deleteIrrigators(where: [irrigatorWhereUniqueInput!]!): [irrigator]
  createlora_antenna_type(
    data: lora_antenna_typeCreateInput!
  ): lora_antenna_type
  createLoraAntennaTypes(
    data: [lora_antenna_typeCreateInput!]!
  ): [lora_antenna_type]
  updatelora_antenna_type(
    where: lora_antenna_typeWhereUniqueInput!
    data: lora_antenna_typeUpdateInput!
  ): lora_antenna_type
  updateLoraAntennaTypes(
    data: [lora_antenna_typeUpdateArgs!]!
  ): [lora_antenna_type]
  deletelora_antenna_type(
    where: lora_antenna_typeWhereUniqueInput!
  ): lora_antenna_type
  deleteLoraAntennaTypes(
    where: [lora_antenna_typeWhereUniqueInput!]!
  ): [lora_antenna_type]
  createnode_firmware_version(
    data: node_firmware_versionCreateInput!
  ): node_firmware_version
  createNodeFirmwareVersions(
    data: [node_firmware_versionCreateInput!]!
  ): [node_firmware_version]
  updatenode_firmware_version(
    where: node_firmware_versionWhereUniqueInput!
    data: node_firmware_versionUpdateInput!
  ): node_firmware_version
  updateNodeFirmwareVersions(
    data: [node_firmware_versionUpdateArgs!]!
  ): [node_firmware_version]
  deletenode_firmware_version(
    where: node_firmware_versionWhereUniqueInput!
  ): node_firmware_version
  deleteNodeFirmwareVersions(
    where: [node_firmware_versionWhereUniqueInput!]!
  ): [node_firmware_version]
  createnode_hardware_version(
    data: node_hardware_versionCreateInput!
  ): node_hardware_version
  createNodeHardwareVersions(
    data: [node_hardware_versionCreateInput!]!
  ): [node_hardware_version]
  updatenode_hardware_version(
    where: node_hardware_versionWhereUniqueInput!
    data: node_hardware_versionUpdateInput!
  ): node_hardware_version
  updateNodeHardwareVersions(
    data: [node_hardware_versionUpdateArgs!]!
  ): [node_hardware_version]
  deletenode_hardware_version(
    where: node_hardware_versionWhereUniqueInput!
  ): node_hardware_version
  deleteNodeHardwareVersions(
    where: [node_hardware_versionWhereUniqueInput!]!
  ): [node_hardware_version]
  createnode_housing_type(
    data: node_housing_typeCreateInput!
  ): node_housing_type
  createNodeHousingTypes(
    data: [node_housing_typeCreateInput!]!
  ): [node_housing_type]
  updatenode_housing_type(
    where: node_housing_typeWhereUniqueInput!
    data: node_housing_typeUpdateInput!
  ): node_housing_type
  updateNodeHousingTypes(
    data: [node_housing_typeUpdateArgs!]!
  ): [node_housing_type]
  deletenode_housing_type(
    where: node_housing_typeWhereUniqueInput!
  ): node_housing_type
  deleteNodeHousingTypes(
    where: [node_housing_typeWhereUniqueInput!]!
  ): [node_housing_type]
  createpcb_gateway(data: pcb_gatewayCreateInput!): pcb_gateway
  createPcbGateways(data: [pcb_gatewayCreateInput!]!): [pcb_gateway]
  updatepcb_gateway(
    where: pcb_gatewayWhereUniqueInput!
    data: pcb_gatewayUpdateInput!
  ): pcb_gateway
  updatePcbGateways(data: [pcb_gatewayUpdateArgs!]!): [pcb_gateway]
  deletepcb_gateway(where: pcb_gatewayWhereUniqueInput!): pcb_gateway
  deletePcbGateways(where: [pcb_gatewayWhereUniqueInput!]!): [pcb_gateway]
  createpcb_node(data: pcb_nodeCreateInput!): pcb_node
  createPcbNodes(data: [pcb_nodeCreateInput!]!): [pcb_node]
  updatepcb_node(
    where: pcb_nodeWhereUniqueInput!
    data: pcb_nodeUpdateInput!
  ): pcb_node
  updatePcbNodes(data: [pcb_nodeUpdateArgs!]!): [pcb_node]
  deletepcb_node(where: pcb_nodeWhereUniqueInput!): pcb_node
  deletePcbNodes(where: [pcb_nodeWhereUniqueInput!]!): [pcb_node]
  createpressure_sensor(data: pressure_sensorCreateInput!): pressure_sensor
  createPressureSensors(data: [pressure_sensorCreateInput!]!): [pressure_sensor]
  updatepressure_sensor(
    where: pressure_sensorWhereUniqueInput!
    data: pressure_sensorUpdateInput!
  ): pressure_sensor
  updatePressureSensors(data: [pressure_sensorUpdateArgs!]!): [pressure_sensor]
  deletepressure_sensor(
    where: pressure_sensorWhereUniqueInput!
  ): pressure_sensor
  deletePressureSensors(
    where: [pressure_sensorWhereUniqueInput!]!
  ): [pressure_sensor]
  createpressure_sensor_type(
    data: pressure_sensor_typeCreateInput!
  ): pressure_sensor_type
  createPressureSensorTypes(
    data: [pressure_sensor_typeCreateInput!]!
  ): [pressure_sensor_type]
  updatepressure_sensor_type(
    where: pressure_sensor_typeWhereUniqueInput!
    data: pressure_sensor_typeUpdateInput!
  ): pressure_sensor_type
  updatePressureSensorTypes(
    data: [pressure_sensor_typeUpdateArgs!]!
  ): [pressure_sensor_type]
  deletepressure_sensor_type(
    where: pressure_sensor_typeWhereUniqueInput!
  ): pressure_sensor_type
  deletePressureSensorTypes(
    where: [pressure_sensor_typeWhereUniqueInput!]!
  ): [pressure_sensor_type]
  createprovince(data: provinceCreateInput!): province
  createProvinces(data: [provinceCreateInput!]!): [province]
  updateprovince(
    where: provinceWhereUniqueInput!
    data: provinceUpdateInput!
  ): province
  updateProvinces(data: [provinceUpdateArgs!]!): [province]
  deleteprovince(where: provinceWhereUniqueInput!): province
  deleteProvinces(where: [provinceWhereUniqueInput!]!): [province]
  createrepair(data: repairCreateInput!): repair
  createRepairs(data: [repairCreateInput!]!): [repair]
  updaterepair(where: repairWhereUniqueInput!, data: repairUpdateInput!): repair
  updateRepairs(data: [repairUpdateArgs!]!): [repair]
  deleterepair(where: repairWhereUniqueInput!): repair
  deleteRepairs(where: [repairWhereUniqueInput!]!): [repair]
  createrepair_type(data: repair_typeCreateInput!): repair_type
  createRepairTypes(data: [repair_typeCreateInput!]!): [repair_type]
  updaterepair_type(
    where: repair_typeWhereUniqueInput!
    data: repair_typeUpdateInput!
  ): repair_type
  updateRepairTypes(data: [repair_typeUpdateArgs!]!): [repair_type]
  deleterepair_type(where: repair_typeWhereUniqueInput!): repair_type
  deleteRepairTypes(where: [repair_typeWhereUniqueInput!]!): [repair_type]
  createsatellite_modem(data: satellite_modemCreateInput!): satellite_modem
  createSatelliteModems(data: [satellite_modemCreateInput!]!): [satellite_modem]
  updatesatellite_modem(
    where: satellite_modemWhereUniqueInput!
    data: satellite_modemUpdateInput!
  ): satellite_modem
  updateSatelliteModems(data: [satellite_modemUpdateArgs!]!): [satellite_modem]
  deletesatellite_modem(
    where: satellite_modemWhereUniqueInput!
  ): satellite_modem
  deleteSatelliteModems(
    where: [satellite_modemWhereUniqueInput!]!
  ): [satellite_modem]
  createsatellite_modem_type(
    data: satellite_modem_typeCreateInput!
  ): satellite_modem_type
  createSatelliteModemTypes(
    data: [satellite_modem_typeCreateInput!]!
  ): [satellite_modem_type]
  updatesatellite_modem_type(
    where: satellite_modem_typeWhereUniqueInput!
    data: satellite_modem_typeUpdateInput!
  ): satellite_modem_type
  updateSatelliteModemTypes(
    data: [satellite_modem_typeUpdateArgs!]!
  ): [satellite_modem_type]
  deletesatellite_modem_type(
    where: satellite_modem_typeWhereUniqueInput!
  ): satellite_modem_type
  deleteSatelliteModemTypes(
    where: [satellite_modem_typeWhereUniqueInput!]!
  ): [satellite_modem_type]
  createsatellite_antenna(
    data: satellite_antennaCreateInput!
  ): satellite_antenna
  createSatelliteAntennas(
    data: [satellite_antennaCreateInput!]!
  ): [satellite_antenna]
  updatesatellite_antenna(
    where: satellite_antennaWhereUniqueInput!
    data: satellite_antennaUpdateInput!
  ): satellite_antenna
  updateSatelliteAntennas(
    data: [satellite_antennaUpdateArgs!]!
  ): [satellite_antenna]
  deletesatellite_antenna(
    where: satellite_antennaWhereUniqueInput!
  ): satellite_antenna
  deleteSatelliteAntennas(
    where: [satellite_antennaWhereUniqueInput!]!
  ): [satellite_antenna]
  createsolar_panel_type(data: solar_panel_typeCreateInput!): solar_panel_type
  createSolarPanelTypes(
    data: [solar_panel_typeCreateInput!]!
  ): [solar_panel_type]
  updatesolar_panel_type(
    where: solar_panel_typeWhereUniqueInput!
    data: solar_panel_typeUpdateInput!
  ): solar_panel_type
  updateSolarPanelTypes(
    data: [solar_panel_typeUpdateArgs!]!
  ): [solar_panel_type]
  deletesolar_panel_type(
    where: solar_panel_typeWhereUniqueInput!
  ): solar_panel_type
  deleteSolarPanelTypes(
    where: [solar_panel_typeWhereUniqueInput!]!
  ): [solar_panel_type]
  createsolution_type(data: solution_typeCreateInput!): solution_type
  createSolutionTypes(data: [solution_typeCreateInput!]!): [solution_type]
  updatesolution_type(
    where: solution_typeWhereUniqueInput!
    data: solution_typeUpdateInput!
  ): solution_type
  updateSolutionTypes(data: [solution_typeUpdateArgs!]!): [solution_type]
  deletesolution_type(where: solution_typeWhereUniqueInput!): solution_type
  deleteSolutionTypes(where: [solution_typeWhereUniqueInput!]!): [solution_type]
  createstorage_location(data: storage_locationCreateInput!): storage_location
  createStorageLocations(
    data: [storage_locationCreateInput!]!
  ): [storage_location]
  updatestorage_location(
    where: storage_locationWhereUniqueInput!
    data: storage_locationUpdateInput!
  ): storage_location
  updateStorageLocations(
    data: [storage_locationUpdateArgs!]!
  ): [storage_location]
  deletestorage_location(
    where: storage_locationWhereUniqueInput!
  ): storage_location
  deleteStorageLocations(
    where: [storage_locationWhereUniqueInput!]!
  ): [storage_location]
  createstock_movement(data: stock_movementCreateInput!): stock_movement
  createStockMovements(data: [stock_movementCreateInput!]!): [stock_movement]
  updatestock_movement(
    where: stock_movementWhereUniqueInput!
    data: stock_movementUpdateInput!
  ): stock_movement
  updateStockMovements(data: [stock_movementUpdateArgs!]!): [stock_movement]
  deletestock_movement(where: stock_movementWhereUniqueInput!): stock_movement
  deleteStockMovements(
    where: [stock_movementWhereUniqueInput!]!
  ): [stock_movement]
  createuser(data: userCreateInput!): user
  createUsers(data: [userCreateInput!]!): [user]
  updateuser(where: userWhereUniqueInput!, data: userUpdateInput!): user
  updateUsers(data: [userUpdateArgs!]!): [user]
  deleteuser(where: userWhereUniqueInput!): user
  deleteUsers(where: [userWhereUniqueInput!]!): [user]
  creatework_order(data: work_orderCreateInput!): work_order
  createWorkOrders(data: [work_orderCreateInput!]!): [work_order]
  updatework_order(
    where: work_orderWhereUniqueInput!
    data: work_orderUpdateInput!
  ): work_order
  updateWorkOrders(data: [work_orderUpdateArgs!]!): [work_order]
  deletework_order(where: work_orderWhereUniqueInput!): work_order
  deleteWorkOrders(where: [work_orderWhereUniqueInput!]!): [work_order]
  createzone(data: zoneCreateInput!): zone
  createZones(data: [zoneCreateInput!]!): [zone]
  updatezone(where: zoneWhereUniqueInput!, data: zoneUpdateInput!): zone
  updateZones(data: [zoneUpdateArgs!]!): [zone]
  deletezone(where: zoneWhereUniqueInput!): zone
  deleteZones(where: [zoneWhereUniqueInput!]!): [zone]
  createcontract(data: contractCreateInput!): contract
  createContracts(data: [contractCreateInput!]!): [contract]
  updatecontract(
    where: contractWhereUniqueInput!
    data: contractUpdateInput!
  ): contract
  updateContracts(data: [contractUpdateArgs!]!): [contract]
  deletecontract(where: contractWhereUniqueInput!): contract
  deleteContracts(where: [contractWhereUniqueInput!]!): [contract]
  createservice_level_agreement(
    data: service_level_agreementCreateInput!
  ): service_level_agreement
  createServiceLevelAgreements(
    data: [service_level_agreementCreateInput!]!
  ): [service_level_agreement]
  updateservice_level_agreement(
    where: service_level_agreementWhereUniqueInput!
    data: service_level_agreementUpdateInput!
  ): service_level_agreement
  updateServiceLevelAgreements(
    data: [service_level_agreementUpdateArgs!]!
  ): [service_level_agreement]
  deleteservice_level_agreement(
    where: service_level_agreementWhereUniqueInput!
  ): service_level_agreement
  deleteServiceLevelAgreements(
    where: [service_level_agreementWhereUniqueInput!]!
  ): [service_level_agreement]
  endSession: Boolean!
  authenticateuserWithPassword(
    email: String!
    password: String!
  ): userAuthenticationWithPasswordResult
  createInitialuser(
    data: CreateInitialuserInput!
  ): userAuthenticationWithPasswordSuccess!
}

union userAuthenticationWithPasswordResult =
    userAuthenticationWithPasswordSuccess
  | userAuthenticationWithPasswordFailure

type userAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: user!
}

type userAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialuserInput {
  name: String
  email: String
  password: String
  type: String
}

type Query {
  assetTypes(
    where: asset_typeWhereInput! = {}
    orderBy: [asset_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [asset_type!]
  asset_type(where: asset_typeWhereUniqueInput!): asset_type
  assetTypesCount(where: asset_typeWhereInput! = {}): Int
  autopsies(
    where: autopsyWhereInput! = {}
    orderBy: [autopsyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [autopsy!]
  autopsy(where: autopsyWhereUniqueInput!): autopsy
  autopsiesCount(where: autopsyWhereInput! = {}): Int
  autopsyTypes(
    where: autopsy_typeWhereInput! = {}
    orderBy: [autopsy_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [autopsy_type!]
  autopsy_type(where: autopsy_typeWhereUniqueInput!): autopsy_type
  autopsyTypesCount(where: autopsy_typeWhereInput! = {}): Int
  autopsyRoots(
    where: autopsy_rootWhereInput! = {}
    orderBy: [autopsy_rootOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [autopsy_root!]
  autopsy_root(where: autopsy_rootWhereUniqueInput!): autopsy_root
  autopsyRootsCount(where: autopsy_rootWhereInput! = {}): Int
  batteryTypes(
    where: battery_typeWhereInput! = {}
    orderBy: [battery_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [battery_type!]
  battery_type(where: battery_typeWhereUniqueInput!): battery_type
  batteryTypesCount(where: battery_typeWhereInput! = {}): Int
  cities(
    where: cityWhereInput! = {}
    orderBy: [cityOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [city!]
  city(where: cityWhereUniqueInput!): city
  citiesCount(where: cityWhereInput! = {}): Int
  clients(
    where: clientWhereInput! = {}
    orderBy: [clientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [client!]
  client(where: clientWhereUniqueInput!): client
  clientsCount(where: clientWhereInput! = {}): Int
  componentTypes(
    where: component_typeWhereInput! = {}
    orderBy: [component_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [component_type!]
  component_type(where: component_typeWhereUniqueInput!): component_type
  componentTypesCount(where: component_typeWhereInput! = {}): Int
  diagnosticTypes(
    where: diagnostic_typeWhereInput! = {}
    orderBy: [diagnostic_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [diagnostic_type!]
  diagnostic_type(where: diagnostic_typeWhereUniqueInput!): diagnostic_type
  diagnosticTypesCount(where: diagnostic_typeWhereInput! = {}): Int
  diagnostics(
    where: diagnosticWhereInput! = {}
    orderBy: [diagnosticOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [diagnostic!]
  diagnostic(where: diagnosticWhereUniqueInput!): diagnostic
  diagnosticsCount(where: diagnosticWhereInput! = {}): Int
  fields(
    where: fieldWhereInput! = {}
    orderBy: [fieldOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [field!]
  field(where: fieldWhereUniqueInput!): field
  fieldsCount(where: fieldWhereInput! = {}): Int
  gateways(
    where: gatewayWhereInput! = {}
    orderBy: [gatewayOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [gateway!]
  gateway(where: gatewayWhereUniqueInput!): gateway
  gatewaysCount(where: gatewayWhereInput! = {}): Int
  gatewayFirmwareVersions(
    where: gateway_firmware_versionWhereInput! = {}
    orderBy: [gateway_firmware_versionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [gateway_firmware_version!]
  gateway_firmware_version(
    where: gateway_firmware_versionWhereUniqueInput!
  ): gateway_firmware_version
  gatewayFirmwareVersionsCount(
    where: gateway_firmware_versionWhereInput! = {}
  ): Int
  gatewayHardwareVersions(
    where: gateway_hardware_versionWhereInput! = {}
    orderBy: [gateway_hardware_versionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [gateway_hardware_version!]
  gateway_hardware_version(
    where: gateway_hardware_versionWhereUniqueInput!
  ): gateway_hardware_version
  gatewayHardwareVersionsCount(
    where: gateway_hardware_versionWhereInput! = {}
  ): Int
  gatewayHousingTypes(
    where: gateway_housing_typeWhereInput! = {}
    orderBy: [gateway_housing_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [gateway_housing_type!]
  gateway_housing_type(
    where: gateway_housing_typeWhereUniqueInput!
  ): gateway_housing_type
  gatewayHousingTypesCount(where: gateway_housing_typeWhereInput! = {}): Int
  gpsAntennaTypes(
    where: gps_antenna_typeWhereInput! = {}
    orderBy: [gps_antenna_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [gps_antenna_type!]
  gps_antenna_type(where: gps_antenna_typeWhereUniqueInput!): gps_antenna_type
  gpsAntennaTypesCount(where: gps_antenna_typeWhereInput! = {}): Int
  gpsNodes(
    where: gps_nodeWhereInput! = {}
    orderBy: [gps_nodeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [gps_node!]
  gps_node(where: gps_nodeWhereUniqueInput!): gps_node
  gpsNodesCount(where: gps_nodeWhereInput! = {}): Int
  hdwIssues(
    where: hdw_issueWhereInput! = {}
    orderBy: [hdw_issueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [hdw_issue!]
  hdw_issue(where: hdw_issueWhereUniqueInput!): hdw_issue
  hdwIssuesCount(where: hdw_issueWhereInput! = {}): Int
  inspections(
    where: inspectionWhereInput! = {}
    orderBy: [inspectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [inspection!]
  inspection(where: inspectionWhereUniqueInput!): inspection
  inspectionsCount(where: inspectionWhereInput! = {}): Int
  inspectionTypes(
    where: inspection_typeWhereInput! = {}
    orderBy: [inspection_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [inspection_type!]
  inspection_type(where: inspection_typeWhereUniqueInput!): inspection_type
  inspectionTypesCount(where: inspection_typeWhereInput! = {}): Int
  installUninstallRequests(
    where: install_uninstall_requestWhereInput! = {}
    orderBy: [install_uninstall_requestOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [install_uninstall_request!]
  install_uninstall_request(
    where: install_uninstall_requestWhereUniqueInput!
  ): install_uninstall_request
  installUninstallRequestsCount(
    where: install_uninstall_requestWhereInput! = {}
  ): Int
  irrigators(
    where: irrigatorWhereInput! = {}
    orderBy: [irrigatorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [irrigator!]
  irrigator(where: irrigatorWhereUniqueInput!): irrigator
  irrigatorsCount(where: irrigatorWhereInput! = {}): Int
  loraAntennaTypes(
    where: lora_antenna_typeWhereInput! = {}
    orderBy: [lora_antenna_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [lora_antenna_type!]
  lora_antenna_type(
    where: lora_antenna_typeWhereUniqueInput!
  ): lora_antenna_type
  loraAntennaTypesCount(where: lora_antenna_typeWhereInput! = {}): Int
  nodeFirmwareVersions(
    where: node_firmware_versionWhereInput! = {}
    orderBy: [node_firmware_versionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [node_firmware_version!]
  node_firmware_version(
    where: node_firmware_versionWhereUniqueInput!
  ): node_firmware_version
  nodeFirmwareVersionsCount(where: node_firmware_versionWhereInput! = {}): Int
  nodeHardwareVersions(
    where: node_hardware_versionWhereInput! = {}
    orderBy: [node_hardware_versionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [node_hardware_version!]
  node_hardware_version(
    where: node_hardware_versionWhereUniqueInput!
  ): node_hardware_version
  nodeHardwareVersionsCount(where: node_hardware_versionWhereInput! = {}): Int
  nodeHousingTypes(
    where: node_housing_typeWhereInput! = {}
    orderBy: [node_housing_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [node_housing_type!]
  node_housing_type(
    where: node_housing_typeWhereUniqueInput!
  ): node_housing_type
  nodeHousingTypesCount(where: node_housing_typeWhereInput! = {}): Int
  pcbGateways(
    where: pcb_gatewayWhereInput! = {}
    orderBy: [pcb_gatewayOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [pcb_gateway!]
  pcb_gateway(where: pcb_gatewayWhereUniqueInput!): pcb_gateway
  pcbGatewaysCount(where: pcb_gatewayWhereInput! = {}): Int
  pcbNodes(
    where: pcb_nodeWhereInput! = {}
    orderBy: [pcb_nodeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [pcb_node!]
  pcb_node(where: pcb_nodeWhereUniqueInput!): pcb_node
  pcbNodesCount(where: pcb_nodeWhereInput! = {}): Int
  pressureSensors(
    where: pressure_sensorWhereInput! = {}
    orderBy: [pressure_sensorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [pressure_sensor!]
  pressure_sensor(where: pressure_sensorWhereUniqueInput!): pressure_sensor
  pressureSensorsCount(where: pressure_sensorWhereInput! = {}): Int
  pressureSensorTypes(
    where: pressure_sensor_typeWhereInput! = {}
    orderBy: [pressure_sensor_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [pressure_sensor_type!]
  pressure_sensor_type(
    where: pressure_sensor_typeWhereUniqueInput!
  ): pressure_sensor_type
  pressureSensorTypesCount(where: pressure_sensor_typeWhereInput! = {}): Int
  provinces(
    where: provinceWhereInput! = {}
    orderBy: [provinceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [province!]
  province(where: provinceWhereUniqueInput!): province
  provincesCount(where: provinceWhereInput! = {}): Int
  repairs(
    where: repairWhereInput! = {}
    orderBy: [repairOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [repair!]
  repair(where: repairWhereUniqueInput!): repair
  repairsCount(where: repairWhereInput! = {}): Int
  repairTypes(
    where: repair_typeWhereInput! = {}
    orderBy: [repair_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [repair_type!]
  repair_type(where: repair_typeWhereUniqueInput!): repair_type
  repairTypesCount(where: repair_typeWhereInput! = {}): Int
  satelliteModems(
    where: satellite_modemWhereInput! = {}
    orderBy: [satellite_modemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [satellite_modem!]
  satellite_modem(where: satellite_modemWhereUniqueInput!): satellite_modem
  satelliteModemsCount(where: satellite_modemWhereInput! = {}): Int
  satelliteModemTypes(
    where: satellite_modem_typeWhereInput! = {}
    orderBy: [satellite_modem_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [satellite_modem_type!]
  satellite_modem_type(
    where: satellite_modem_typeWhereUniqueInput!
  ): satellite_modem_type
  satelliteModemTypesCount(where: satellite_modem_typeWhereInput! = {}): Int
  satelliteAntennas(
    where: satellite_antennaWhereInput! = {}
    orderBy: [satellite_antennaOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [satellite_antenna!]
  satellite_antenna(
    where: satellite_antennaWhereUniqueInput!
  ): satellite_antenna
  satelliteAntennasCount(where: satellite_antennaWhereInput! = {}): Int
  solarPanelTypes(
    where: solar_panel_typeWhereInput! = {}
    orderBy: [solar_panel_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [solar_panel_type!]
  solar_panel_type(where: solar_panel_typeWhereUniqueInput!): solar_panel_type
  solarPanelTypesCount(where: solar_panel_typeWhereInput! = {}): Int
  solutionTypes(
    where: solution_typeWhereInput! = {}
    orderBy: [solution_typeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [solution_type!]
  solution_type(where: solution_typeWhereUniqueInput!): solution_type
  solutionTypesCount(where: solution_typeWhereInput! = {}): Int
  storageLocations(
    where: storage_locationWhereInput! = {}
    orderBy: [storage_locationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [storage_location!]
  storage_location(where: storage_locationWhereUniqueInput!): storage_location
  storageLocationsCount(where: storage_locationWhereInput! = {}): Int
  stockMovements(
    where: stock_movementWhereInput! = {}
    orderBy: [stock_movementOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [stock_movement!]
  stock_movement(where: stock_movementWhereUniqueInput!): stock_movement
  stockMovementsCount(where: stock_movementWhereInput! = {}): Int
  users(
    where: userWhereInput! = {}
    orderBy: [userOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [user!]
  user(where: userWhereUniqueInput!): user
  usersCount(where: userWhereInput! = {}): Int
  workOrders(
    where: work_orderWhereInput! = {}
    orderBy: [work_orderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [work_order!]
  work_order(where: work_orderWhereUniqueInput!): work_order
  workOrdersCount(where: work_orderWhereInput! = {}): Int
  zones(
    where: zoneWhereInput! = {}
    orderBy: [zoneOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [zone!]
  zone(where: zoneWhereUniqueInput!): zone
  zonesCount(where: zoneWhereInput! = {}): Int
  contracts(
    where: contractWhereInput! = {}
    orderBy: [contractOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [contract!]
  contract(where: contractWhereUniqueInput!): contract
  contractsCount(where: contractWhereInput! = {}): Int
  serviceLevelAgreements(
    where: service_level_agreementWhereInput! = {}
    orderBy: [service_level_agreementOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [service_level_agreement!]
  service_level_agreement(
    where: service_level_agreementWhereUniqueInput!
  ): service_level_agreement
  serviceLevelAgreementsCount(
    where: service_level_agreementWhereInput! = {}
  ): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = user

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
